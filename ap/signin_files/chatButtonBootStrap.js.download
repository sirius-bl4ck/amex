/**
 * This file contains all the pre-configurable settings and public method to control on Embedded Window flow from Parent page.
 * You can change the pre0configurable settings below. However, please dont change the functionalities unless you absolutely know what you are doing.
 * To make it works, you need to change the correct reference to your iFrame resource
 *  lpCWTagConst.CHAT_BASE_URL - your base URL domain
 *  lpCWTagConst.CHAT_LOCATION_URI - your URI referencing to the resources of iFrame
 **/

var chatcurrentTime;
var chatlastrefreshtime=0;
var chatlasttimeout=false;
var isTimerStopped=false;
var timeoutInterval=null;
var nuanceFlowFlag= "BAU";
var lenosToken="";
var lenoofferCount=0;
var lenosecCount=0;
var lenolocofferCount=0;
var lenofromReload=false;
var starttimeLP;
var expansionFlag="standard";
//var expansionFlag="centurion";  
var lpTestPopulation="Automation";
var jwtValue='';
var firsttimelogin ="false";
var isFirstSlider=true;
var RCWidgetStepSize=0;
var sendMessage=false;
var LNVALUEfromSession;
var cob_sId;
var cob_aId; 
var chatAssistJSON = window.chatAssistJSON || {};
chatAssistJSON.commonAppData = chatAssistJSON.commonAppData || {};
var bdaasFramebind =false;
var confirmClicked=false;
var sTokenRes = null;
var sToken = null;
var intiatedFromChatPrioritization = false;
var globalFirstName ="";
var xcutType = "";
var pollforheight = false;
var devNavigator = window.navigator.userAgent.toLowerCase();
var isIPhone = navigator.userAgent.match(/(iPhone)/g);
var isIOSChrome = window.navigator.userAgent.match(/(CriOS)/g);
//var tmpQKBIndex=-1; 
// US1615751 - End chat confirmation screen 
var confirmDispalyFlag = false;
var savelpButtonDivcNames="";
var mycaScrollX = 0;
var mycaScrollY = 0;
var smsForChat = false;
var smsEventBind = false;
var chatEnv = 'E3';

/*if(window.location.href.indexOf("credit-cards/benefits/view-all")!=-1){
	if(typeof jQuery != "undefined"){
		$=jQuery;
	}
}*/

/*if(typeof lpTestPopulation != "undefined")
	lpTestPopulation = "BAU";
if(typeof lpTestPopulation != "undefined" && lpTestPopulation!="")
	nuanceFlowFlag = lpTestPopulation.toUpperCase();
*/
//var nuanceFlowFlag=lpTestPopulation;
window.lpCWTagUI = window.lpCWTagUI || {};
window.lpCWTagConst = window.lpCWTagConst || {};
lpCWTagConst.CHAT_BASE_URL = "https://icm.aexp-static.com";
lpCWTagConst.CHAT_LOCATION_URI = "/content/dam/chat/prod/lechat/";
lpCWTagConst.CHAT_LOCATION_URI2 = "";
lpCWTagConst.LENOCHAT_LOCATION_URI = "/content/dam/chat/prod/lechat/html/customer.html?lpsuid=";
lpCWTagConst.DEBUG_ENABLE = false; //shows log in console only for Parent page
lpCWTagConst.LOGGER_NAME_BOOTSTAP = "LPChatBootstrap"; //debug purposes only
lpCWTagConst.WS_ENABLE=true; //Web Services Enable/not - if enable, you will see spinning wheel
lpCWTagConst.VERSION="0.9.6-b18"; //the version on this Embedded Window
lpCWTagConst.lpChatTitleVal = "American Express Chat"; // Chat Title for large and medium devices - RWD Feature Changes
lpCWTagConst.lpSmDevChatTitleVal = "Amex Chat"; // Chat Title for small devices - RWD Feature Changes
lpCWTagConst.lpChatTitleDock = "Dock";
lpCWTagConst.lpChatTitleUndock = "Un-Dock";
lpCWTagConst.lpChatTitleMinimize = "Minimize";
lpCWTagConst.lpChatTitleMaximize = "Maximize";
lpCWTagConst.lpChatTitleClose = "Close";
lpCWTagConst.lpNewChatMsgArrive = "New Chat Message Has Arrived"; //change the new messge when flashing title
lpCWTagConst.enableSiteTitleFlashing = true;
lpCWTagConst.enableDockUnDock = true; //enable if you want to definitely show the dock/undock
lpCWTagConst.lpTitleFlashingTimer; //timer to use for title flashing
lpCWTagConst.widgetMarginRight = "32"; //indicates margin right
lpCWTagConst.P1_EVENT_ID = 1290334214;
lpCWTagConst.P1_WINDOW_ID ={"E2":  [ 2540478830 ], "E3": [ 2757096730 ]};
/**
 * Logger - to provide printing statement and JSON object to browser console.
 * Usage:
 *   logger = new lpCWTagUI.LPChatWidgetLogger();
 *   logger.debug("string or json object", "string or json object")
 * Output:
 *  time_stamp : LOGGER NAME : string or json object : string or json object
 * @version: 0.9
 */
lpCWTagUI.LPChatWidgetLogger = lpCWTagUI.LPChatWidgetLogger || function LPChatWidgetLogger() {
 var cwLogger = this;
 
 /**
  * adding leading zeros
  * @param num - actual number
  * @param size - length of actual number needs for leading zeros
  */
 function padZeros(num, size) {
     var temp = "000" + num;
     return temp.substr(temp.length-size);
 }
 /**
  * printing to browser console if supported
  * @param pLogName - logger name
  * @param pData - a simple string or complex JSOn data type
  * @param pData2 - a simple string or complex JSOn data type
  * @param pDebugOn - output to console only if true
  */
 function print_to_log(pLogName, pData, pData2, pDebugOn) {
  if (pDebugOn) {
   var date = new Date();
   try {
    pData = typeof pData === 'string' ? pData : JSON.stringify(pData);
    pData2 = typeof pData2 === 'string' ? pData2 : JSON.stringify(pData2);
   } catch (exc) {
    pData = exc;
    pData2 = "...";
   }
   date = "" + padZeros(date.getHours(), 2) + ":" + padZeros(date.getMinutes(), 2) 
      + ":" + padZeros(date.getSeconds(), 2) + ":" + padZeros(date.getMilliseconds(), 3);
   if(!(window.console && console.log)) {
     console = {
       log: function(){},
       debug: function(){},
       info: function(){},
       warn: function(){},
       error: function(){}
     };
   }
   console.log(date + " " + pLogName + " : " + pData + (pData2 == "" ? "" : (" : " + pData2)));
  }
 }
 
 /**
  * print debug statement to console only if DEBUG_ENABLE is true
  * @param dataOrMessage - string or JSON
  * @param dataOrMessage2 - string or JSON
  */
 cwLogger.debug = function(dataOrMessage, dataOrMessage2){
  print_to_log(lpCWTagConst.LOGGER_NAME_BOOTSTAP, dataOrMessage || "", dataOrMessage2 || "", lpCWTagConst.DEBUG_ENABLE);
 } 
 
 /**
  * print info statement to console
  * @param dataOrMessage - string or JSON
  * @param dataOrMessage2 - string or JSON
  */
 cwLogger.info = function(dataOrMessage, dataOrMessage2){
  print_to_log(lpCWTagConst.LOGGER_NAME_BOOTSTAP, dataOrMessage || "", dataOrMessage2 || "", lpCWTagConst.DEBUG_ENABLE);
 } 
}
/**
 * LPChatWidgetUI is providing the wrapper functionality to create chat iFrame and all communication to the iFrame via postMessage.
 * This class also receiving postMessage (command) from iFrame to resize the PCI as well as other functionalities to support the wrapper behavior
 * Usage:
 *   chatUI = new lpCWTagUI.LPChatWidgetUI(window);
 *   chatUI.loadChat()
 * Output:
 *  will load the Embedded Window widget
 * @version: 0.9
 */
lpCWTagUI.LPChatWidgetUI = lpCWTagUI.LPChatWidgetUI|| function LPChatWidgetUI(window) {
 var myUI = this;
 var webserviceTimer;
 var logger = new lpCWTagUI.LPChatWidgetLogger();
 var chatWinLoaded = false;
 var isChatActive = false;
 var isDock = true;
 var setOffPositionValue = '';
 var setTopOffPositionValue = ''; 
 var setLeftOffPositionValue = ''; 
 var lpVisitorSessionId = "";
 var originalSiteTitle="";
 var chatMaximize = true;
 var lpPCIGenIDEnable = lpCWTagConst.WS_ENABLE;
 var chatWizContainer, chatiFrameContainer, chatiFrame, dragManager, draManagerSession;
 var isPciVisible = false;
 var chatFrameLoaded = false;
 var previousTop=0, previousLeft = 0;
 var suid='';

 
 function getElement(id){
  return document.getElementById(id); 
 }
 
 function removeElement(element){
  if(element && element.parentNode)
   element.parentNode.removeChild(element); 
 }
 
 function showElement(idObj){
  if(typeof idObj != "undefined")
   idObj.style.display = "block"; 
 }
 
 function showElementById(id){
  showElement(getElement(id));
 }
 
 function hideElement(idObj){
  if(typeof idObj != "undefined")
   idObj.style.display = "none"; 
 }
 
 function hideElementById(id){
  hideElement(getElement(id)); 
 }
 
 function deleteAppendStyleClassById(elementId, classToRemove, classToAdd){
  return deleteAppendStyleClass(getElement(elementId), classToRemove, classToAdd);
 }
 
 /**
  * remove the css class and then append new css class
  * @param element - element to modify
  * @param classToRemove - css class to remove from the exist element
  * @param classToAdd - css class to append/add to the exist element
  */
 function deleteAppendStyleClass(element, classToRemove, classToAdd){
  logger.debug("deleteAppendStyleClass", "classToRemove="+classToRemove+", classToAdd="+classToAdd);
  
  var newClassName = "";       
    if(typeof element != "undefined" && element && element.className){
     var classes = element.className.split(/\s/g);  //split by whitespace
     if(classes.length > 0){
      for(var i = 0; i < classes.length; i++) {
       if(classes[i] != "" && classes[i] !== classToRemove && classes[i] !== classToAdd) {
        if(newClassName != "")
         newClassName += " ";
          newClassName += classes[i];
        }
      }
    }
   }
   
   if(newClassName != "")
   newClassName += " ";
    newClassName += classToAdd;
    logger.debug("deleteAppendStyleClass", "newClassName="+newClassName);
    return newClassName;
 }
 
 /**
  * Retrieve the offset of the element
  * @param element
  */
 function getOffset(element) {
  var left = 0, top = 0;
    while( element && !isNaN( element.offsetLeft ) && !isNaN( element.offsetTop ) ) {
        left += element.offsetLeft - element.scrollLeft;
        top += element.offsetTop - element.scrollTop;
        element = element.offsetParent;
    }
    return { top: top, left: left };
 }
 /**
  * Bind event to DOM. Supporting IE8 +
  * @param element to bind
  * @param eventName - event name to bind
  * @param callback - callback method
  */
 function bindEvent(element, eventName, callback) {
    if (element.addEventListener) {
        element.addEventListener(eventName, callback, false);
    } else {
        element.attachEvent("on" + eventName, callback);
    }
 }
 
 /**
  * Unbinds method from DOM
  * @param element to unbind
  * @param eventName - event name to unbind
  * @param callback - callback method
  */
 function unBindEvent(element, eventName, callback) {
    if (element.addEventListener) {
        element.removeEventListener(eventName, callback, false);
    } else {
        element.detachEvent("on" + eventName, callback);
    }
 }
 /**
  * Buid the iFrame of Embedded Chat Window and mark if the DIV has created to avoid creating multiple embedded window.
  */
 function lpChatBuildFrame(pageReload) {
  downLoadchatJQueryJS();
  if(!chatWinLoaded){
   logger.debug("lpChatBuildFrame", "...");
   var body = document.body;
   try{
    //register to receive PostMessage prior create iFrame in case of iFrame will fireback the msg to show the container
    myUI.registerOnMessage();
    
    // 1. create outtermost container DIV '<div id="lpChatWizContainer" style="display:none;"></div>'
    chatWizContainer = document.createElement('div');
    chatWizContainer.id = 'lpChatWizContainer';
 if(device.mobile()){   
	chatWizContainer.className = "lp_US"+ " res_"+C2C.RWD.deviceBucket + " res_"+C2C.RWD.roundedWidth;
 }else{
  chatWizContainer.className = "lp_US";
 } 
    chatWizContainer.style.display="none";
	if(window.location.hostname === "global.americanexpress.com"){
		chatWizContainer.style.zIndex = 100;
	}
    
    body.appendChild(chatWizContainer);
    
    // 2. create Title contain for draggable. When chat is minize, only this title contain stay 'on' 
    chatWizContainer.innerHTML = makeHeader();
	
	endchatoverlay = document.createElement('div');
	endchatoverlay.id = 'mainpageoverlay';
    chatWizContainer.appendChild(endchatoverlay);
	
	endchatConflyr = document.createElement('div');
	endchatConflyr.id = 'mainpageprompt';
    chatWizContainer.appendChild(endchatConflyr);
	
	var endchatlayer= '<div id="confirmMessage">Are you sure you wish to end this chat?</div><div id="confirmButton" tabindex="0">End Chat</div><div id="confirmCancel" tabindex="0">Stay</div>';
	document.getElementById('mainpageprompt').innerHTML=endchatlayer;
	
	var lecobrowselyr = document.createElement('div');
	lecobrowselyr.id = 'coBrowseWrapper';
	lecobrowselyr.className="coBrowseContainer";
	var cobrowsecontent = '<div id="coBrowse-div1" class="coBrowseHeading"><div class="coBrowseLabel" tabindex="0">Lets start a Co-Browse Session</div><div class="coBrowseDescription" tabindex="0">By clicking "I Agree, Start Session", you authorize us to view and give us access to your current web session, subject to our <a href="https://www.americanexpress.com/us/legal-disclosures/co-browse-terms-of-use.html" target="_blank">Terms of Use</a>. End your session by clicking the "X" at the top of the website.</div></div><div id="coBrowse-div2" class="coBrowseBtnContainer"><button type="button" class="coBrowseCancelBtn" id="coBrowseCancel">Cancel</button><button type="button" class="coBrowseAgreeBtn" id="coBrowseAgree">I Agree, Start Session</button></div>';
	chatWizContainer.appendChild(lecobrowselyr);
	document.getElementById('coBrowseWrapper').innerHTML=cobrowsecontent;
   
    // 3. create a iframe holder area '<div id="lpChatiFrameContainer" class="lpPosRel"></div>'
    chatiFrameContainer = document.createElement('div');
    chatiFrameContainer.id = 'lpChatiFrameContainer';
    chatiFrameContainer.className ="lpPosRel";
    chatWizContainer.appendChild(chatiFrameContainer);
   
    // 4. attach the iframe to lpChatiFrameContainer
    chatiFrame = document.createElement("iframe");
    chatiFrame.id = 'lpChatiFrame';
    chatiFrame.className = 'lpChatiFrame';
	chatiFrame.name = 'lpchatframe';
    chatiFrame.src = getFrameSource(); 
    chatiFrame.scrolling = 'no';
    chatiFrame.frameBorder = '0';
    chatiFrame.style.border = "none";
    chatiFrame.style.width = "100%";
 /*    chatiFrame.style.height = "410px"; */
    chatiFrame.setAttribute('allowtransparency', 'true');
	chatiFrame.style.backgroundColor = "#fff";
    //chatiFrame.onload = flagChatFrameLoaded;
    bindEvent(chatiFrame, "load", flagChatFrameLoaded);
    chatiFrameContainer.appendChild(chatiFrame);
    
    chatWinLoaded = true;
  if(device.mobile()){   
	adjustIframeContainerHeight();
  }else{
    chatiFrame.style.height = "410px";
  }
	// US1587670  Disable Landscape Mode - Mobile Web Only
    makeLandscapeDivForMin();
	onlandscapeorientation(false, pageReload);
    makeHeaderForMin();
    document.getElementById("lpChatTitleContainerMin").style.display = "none";
    //bind all events to this chat
    myUI.bindEvents();
	if(window.location.href.indexOf("travel-offers")!=-1  || window.location.href.indexOf("my-trips")!=-1 || window.location.href.indexOf("travel-experts")!=-1 || 
			window.location.href.indexOf("travelexperts")!=-1 ){
		window.location.hash = 'ioa'; 
	}
		/** Get current window scroll positions */
		mycaScrollX = Math.round(window.pageXOffset);
		mycaScrollY = Math.round(window.pageYOffset);
		/** US1922574: SIT_RWD_Minimize the Chat window when the user navigates or with chat_MOBILE Only */
		if (pageReload && device.mobile()) {
			setTimeout(function() { flashingStart(); }, 20);
		}
   }catch(excp){
    logger.debug("lpChatBuildFrame", "Exception occurred", excp);
   }
  }else{
   logger.debug("lpChatBuildFrame", "chat window already loaded");
  }
 }
 
 function downLoadchatJQueryJS(){
	 if(typeof $iOA === "undefined"){
		 var oHead = document.getElementsByTagName('head').item(0);
	var oScript = document.createElement("script");
	oScript.type = "text/javascript";	
	oScript.async = true;
	oScript.src = "https://icm.aexp-static.com/content/dam/search/ioa/js/iOAjquery1.6.3.min.js";
	oHead.appendChild(oScript);
	 }	 
 }
  
function focusOnEndChat(e){ 
	e = e || window.event;
	var key = e.keyCode || e.which;
	if (key == 9) {  
		document.getElementById("confirmButton").focus();
		e.preventDefault();
	}if(key == 13){
    closeButtonCancelClick();
    document.getElementById("lpChatEndChatBtn").focus();
    e.preventDefault();
  } 
}	
 
function closeButtonConfirmClickonKey(e){
  e = e || window.event;
	var key = e.keyCode || e.which;
  if(key == 13){
    closeButtonConfirmClick();
    document.getElementById("lpChatEndChatBtn").focus();
    e.preventDefault();
  } 
} 

 function flagChatFrameLoaded(){
  logger.debug("flagChatFrameLoaded", "method invoke");
  chatFrameLoaded = true;
  //document.getElementById("lpChatWizContainer").style.display = "block";
 }
 
  function sendPostMessageToC2C(jsonData){
	 logger.debug("parentFrame sending postmsg to ="+getTargetForC2CFrame(), jsonData);
  if (getC2CFrameObj().postMessage)
	getC2CFrameObj().postMessage(JSON.stringify(jsonData), getTargetForC2CFrame()); 
  else  
   throw new Error ("Your browser does not support the postMessage method!"); 
 }
 
 function getC2CFrameObj(){
	 var x = document.querySelectorAll("iframe[src^='https://icm.aexp-static.com/content/dam/chat/html/C2CFrame.html']")[0];
	 if(typeof x != "undefined" && x != null )
	 return (x.contentWindow || x.contentDocument);
 }
 
 function getTargetForC2CFrame(){
  var iFrameURL = "https://icm.aexp-static.com/content/dam/chat/html/C2CFrame.html";
  return iFrameURL.indexOf('https') > -1 ? 'https://' + iFrameURL.substr(8).split('/')[0] : 'http://'
       + iFrameURL.substr(7).split('/')[0];
 }
  
  
 function sendPostMessageToRCWidget(jsonData){
	 logger.debug("parentFrame sending postmsg to ="+getTargetForLenoChatFrame(), jsonData);
  if (getRCWidgetFrameObj().postMessage)
	getRCWidgetFrameObj().postMessage(JSON.stringify(jsonData), getTargetForLenoChatFrame()); 
  else  
   throw new Error ("Your browser does not support the postMessage method!"); 
 }
 
 function getRCWidgetFrameObj(){
	 var x = document.getElementById("lnChatiFrame")
	 if(typeof x != "undefined" && x != null )
	 return (x.contentWindow || x.contentDocument);
 }
 
 function getTargetForChatFrame(){
  var iFrameURL = getFrameSource();
  return iFrameURL.indexOf('https') > -1 ? 'https://' + iFrameURL.substr(8).split('/')[0] : 'http://'
       + iFrameURL.substr(7).split('/')[0];
 }
 
 function getTargetForLenoChatFrame(){
  var iFrameURL = getLenoFrameSource()
  return iFrameURL.indexOf('https') > -1 ? 'https://' + iFrameURL.substr(8).split('/')[0] : 'http://'
       + iFrameURL.substr(7).split('/')[0];
 }
 
 function getChatBaseDomain() {
  return lpCWTagConst.CHAT_BASE_URL.replace(/,\s*$/, ""); 
 }
 
 
 function lnChatBuildFrame(suid,reloadstr){
	if(typeof(slFlag)!="undefined" && slFlag){
	var chatWizContainer = document.getElementById('lpChatiFrameContainer');	
	lnchatiFrameContainer = document.createElement('div');
    lnchatiFrameContainer.id = 'leno-ChatiFrameContainer';    
    chatWizContainer.appendChild(lnchatiFrameContainer);	
    lnchatiFrame = document.createElement("iframe");
    lnchatiFrame.id = 'lnChatiFrame';
    lnchatiFrame.className = 'lpChatiFrame';
    lnchatiFrame.src = getLenoFrameSource(suid,reloadstr);
    lnchatiFrame.scrolling = 'no';
    lnchatiFrame.frameBorder = '0';
    lnchatiFrame.style.border = "none";
    lnchatiFrame.style.width = "254px";
    lnchatiFrame.style.height = "360px";
    lnchatiFrame.setAttribute('allowtransparency', 'true');       
    bindEvent(lnchatiFrame, "load", flagChatFrameLoaded);
    lnchatiFrameContainer.appendChild(lnchatiFrame);
	myUI.bindEvents();
	}
}
 
function lpChkValidUser() {
	try{
            var s = myUI.lpReadCookie("amexsessioncookie");
            var z = myUI.lpReadCookie("blueboxvalues");
            var r = myUI.lpReadCookie("SMSESSION");
            if (s != null  && s != "") {
                var v = new Date()
                  , u = v.getTime()
                  , w = "=([^|]+)"
                  , y = s.match("uts" + w)[1]
                  , x = parseInt((u - y) / (1000 * 60 * 60));
                if (x < 12) {
                    return true
                } else {
                    return false
                }
            } else {
                if ((z != null  && z != "") || (r != null  && r != "LOGGEDOFF")) {
                    return true
                } else {
                    return false
                }
            }
	}catch(e){
		return false
	}	
        }
 myUI.lpReadCookie = function(u) {
            var w = u + "=";
            var s = document.cookie.split(";");
            for (var v = 0; v < s.length; v++) {
                var r = s[v];
                while (r.charAt(0) == " ") {
                    r = r.substring(1, r.length)
                }
                if (r.indexOf(w) == 0) {
                    return r.substring(w.length, r.length)
                }
            }
            return null 
        }
		
 function getLenoFrameSource(suid,reloadstr) {
	 	var iphone_version = iOSversion();
	  //lenoframeURL = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/html/customer.html?dB="+C2C.RWD.deviceBucket+"&rW="+C2C.RWD.roundedWidth+"&dH="+window.innerHeight+"&lpsuid="+suid+reloadstr+"&intlvr="+glbver+"&src="+window.location.protocol+"//"+window.location.hostname+"&iphone_version="+iphone_version;
    
    lenoframeURL = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/html/rcCustomer.html?dB="+C2C.RWD.deviceBucket+"&rW="+C2C.RWD.roundedWidth+"&dH="+window.innerHeight+"&lpsuid="+suid+reloadstr+"&intlvr="+glbver+"&src="+window.location.protocol+"//"+window.location.hostname+"&iphone_version="+iphone_version;
	 
	  return lenoframeURL;
 }		
 
 function getFrameSource() {
  var frameURL = '';
  if(lpChkValidUser()){
  frameURL = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/html/leChatWireFrame.html?userloggedin=true&dB="+C2C.RWD.deviceBucket+"&rW="+C2C.RWD.roundedWidth+"&dH="+window.innerHeight;  
  
  }else{
  frameURL = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/html/leChatWireFrame.html?dB="+C2C.RWD.deviceBucket+"&rW="+C2C.RWD.roundedWidth+"&dH="+window.innerHeight;
     }  
  if(smsForChat) 
   frameURL=frameURL+"&smsForChat=true";
  if(document.cookie.indexOf("smschat_active")>-1){
    frameURL=frameURL+"&smschatactive=true";
  }
  if(document.cookie.indexOf("lpchat_active")>-1){
	  frameURL=frameURL+"&lpchatactive=true";
  }else{
	  frameURL=frameURL+"&lpchatactive=false";
  }
  if(document.cookie.indexOf("marvinchat_active")>-1){
	  frameURL=frameURL+"&marvinchatactive=true";
  }else{
	  frameURL=frameURL+"&marvinchatactive=false";
  }  
  if(typeof(Bootstrapper) != "undefined"){
		frameURL=frameURL+"&lpctrycd="+Bootstrapper.ensMarket;
	}  
	frameURL=frameURL+"&intlvr="+glbver;
  frameURL=frameURL+"&src="+window.location.protocol+"//"+window.location.hostname;
	
	var cvalue = getCookie_AA('lpdata');
	var str ='';
	if(cvalue!=""){
	var carr = cvalue.split("||");
	for(i=0;i<carr.length;i++){
		var pname = carr[i].split("=")[0];
		var pvalue = carr[i].split("=")[1]; 
		str=str+'&'+pname+"="+pvalue;
	}
	var vid = getCookie_AA('vid');
	str=str+'&vid='+vid;	
	
	var lastupdate = getCookie_AA('lpupdate');
	str=str+'&lpupdate='+lastupdate;
	
	var lpcoredata = getCookie_AA("lpcoredata");
	lpcoredata = encodeURIComponent(lpcoredata);
	str=str+'&smdatacore='+lpcoredata;
	
   }   
   var setatbbv = getCookie_AA("setatbbv");
	str=str+'&setatbbv='+setatbbv;
	
	var setatesc = getCookie_AA("setatesc");
	str=str+'&setatesc='+setatesc;
	
	var setatcnvsid = getCookie_AA("setatcnvsid");
	str=str+'&setatcnvsid='+setatcnvsid;
	
	var levisitorId = getCookie_AA("levisitorId");
	str=str+'&levisitorId='+levisitorId;
	
	var lesessionId = getCookie_AA("lesessionId");
	str=str+'&lesessionId='+lesessionId;
	
	var leinteractionContextId = getCookie_AA("leinteractionContextId");
	str=str+'&leinteractionContextId='+leinteractionContextId;
	
	var lecid = getCookie_AA("lecid");
	str=str+'&lecid='+lecid;
	
	var leeid  = getCookie_AA("leeid");
	str=str+'&leeid='+leeid;
	
	var lelastAgent = getCookie_AA("lelastAgent");
	str=str+'&lelastAgent='+lelastAgent;
	
	var lepriority = getCookie_AA("lepriority");
	str=str+'&lepriority='+lepriority;
	
	var lprecmon = getCookie_AA("lprecmon");
	str=str+'&lprecmon='+lprecmon;
	
	var lpstate = getCookie_AA("lpstate");
	str=str+'&lpstate='+lpstate;
	
var jwtVal = getCookie_AA("jwtVal");
	str=str+'&jwtValue='+jwtVal;
	
   frameURL=frameURL+str;
	if((window.location.href.indexOf("travel")!=-1) || (window.location.href.indexOf("iseatz.com")!=-1)){
		frameURL=frameURL+'&travelpage=true';
	}
	var qlpscont;
	if (typeof window.lpMTagConfig  != "undefined") {		
		if(typeof window.lpMTagConfig.FPC_CONT!= "undefined")
			qlpscont = window.lpMTagConfig.FPC_CONT;
		else
			qlpscont = getCookie_AA("qScont");
		frameURL=frameURL+'&qlpscont='+qlpscont;
  }else{
	  qlpscont = getCookie_AA("qScont");
		frameURL=frameURL+'&qlpscont='+qlpscont;
  }
	
		
  return frameURL;
 }
 
 function isSameOrigin(respDomain) {
  logger.debug("isSameOrigin respDomain=" + respDomain , "targetDomain: " + getTargetForChatFrame());
  return getTargetForChatFrame() == respDomain ? true : false;
 }
 
 /**
  * Send postMessage to iFrame
  * @param jsonData - json data to send to iFrame
  */
 function sendPostMessage(jsonData){
  logger.debug("parentFrame sending postmsg to ="+getTargetForChatFrame(), jsonData);
  
  if (getLPChatiFrameObj().postMessage)
   getLPChatiFrameObj().postMessage(JSON.stringify(jsonData), getTargetForChatFrame()); 
  else  
   throw new Error ("Your browser does not support the postMessage method!"); 
     
 }
 
 function getLPChatiFrameObj() {
  var x = document.getElementById("lpChatiFrame");
  return (x.contentWindow || x.contentDocument);
 }
 
 //hide embedded chat window
 function hideLPChat() {
  hideElement(chatWizContainer);
 }
 
 //show embedded chat window
 function showLPChat() {
  showElement(chatWizContainer);
 }
 
 /**
  * Fire web service and detecting auto completion within 10sec
  */
 
	/* code for session extention on SPA starts*/
	var sessionIntervalID =null;
	var eventChat = null;
	if(document.createEvent){
		eventChat = document.createEvent('CustomEvent');
		eventChat.initCustomEvent('extendSession', false, false, {});
	}

	myUI.keepSessionAlive  = function(){
		//console.log("in myUI.keepSessionAlive");
	  window.dispatchEvent(eventChat);	  
	}
	/* code for session extention on SPA ends*/
 
   /* code for refresh starts here*/
 function refreshTillTimeout(lastctr){
		if (timeoutInterval !== null) return;	
	 var timeCounter=parseInt(lastctr);
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REFCTR", "value" : timeCounter});
		timeoutInterval = setInterval(function(){
		timeCounter=timeCounter+1;
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REFCTR", "value" : timeCounter}); 
		if((timeCounter<30 && timeCounter%2 == 0) && !chatlasttimeout){
			setCookie('lp_flg', "true", null, 120);
			var travelele = document.getElementById("rhContainer");	
			if (typeof timeoutWidget!= "undefined") {
				timeoutWidget.refreshSession();
			}else if (typeof chatSessionCallback != "undefined") {
				chatSessionCallback(true);
			}else if(window.location.href.indexOf("ssearch.jsp")>-1){
				var d = new Date();
				chatcurrentTime = d.getTime();
			}else if(typeof travelele !== 'undefined' && travelele !== null){
				angular.element(document.getElementById("rhContainer")).scope().$parent.userSessionTimeout();
	  	    }else{ //added else condition for SPA
		    //console.log("in keepSessionAlive");
			var d = new Date();
			chatcurrentTimetmp = d.getTime();
			lpChatWidgetUI.keepSessionAlive();
			chatlastrefreshtime = chatcurrentTimetmp; 				
		}	
			logger.debug("refreshSession started", "refresh method triggered");
			isTimerStopped=false;
		}
		if(timeCounter>=30 || chatlasttimeout){			
			if(!chatlasttimeout){
				if(timeCounter>=30){
					//sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "TIMERCOMPLETE", "value" : "true"}); 
				}
			}
			clearInterval(timeoutInterval);
			logger.debug("refreshSession stopped");
			chatlasttimeout=false;
			isTimerStopped=true;
			clearInterval(sessionIntervalID); //added here for SPA
		}		
	 
   }, 60000);//2 mins 
 }
 
 //invokes when close button on the title bar is clicked
 function closeButtonClicked(){
  logger.debug("closeButtonClicked", "method is invoked");
  deletelpchatActiveCookie1('lpPopulation');
  try {
      if (typeof omn_rmassistaction!= "undefined") 
	omn_rmassistaction("Click","LiveChat_InChatSession-Close");
  }catch(e){
	//console.log("omn error LiveChat_InChatSession-Close");
  }
  if(document.getElementById("mainpageprompt").style.display!="block"){
  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "END_CHAT"});
	confirmClicked=false;
  }
 }
 
 function closeButtonConfirmClick(){	 
     if(!confirmClicked){
	 sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "CONFIRM_END_CHAT"});
	 }
	 //confirmClicked=true;	
	 document.getElementById("mainpageoverlay").style.display="none";
	 document.getElementById("mainpageprompt").style.display="none";
	 document.getElementById("coBrowseWrapper").style.display = 'none';
	 document.getElementById("coBrowseWrapper").className = 'cobClose';	
	 //$("#mainpageoverlay").hide();
	 //$("#mainpageprompt").hide();
 }
 
 function closeButtonCancelClick(){
	 if(!confirmClicked){
	 document.getElementById("mainpageoverlay").style.display="none";
	 document.getElementById("mainpageprompt").style.display="none";
		// US1615751 - End chat confirmation screen 
		confirmDispalyFlag = false;
	 //$("#mainpageoverlay").hide();
	// $("#mainpageprompt").hide();
	 sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "CANCEL_END_CHAT"});
	 }
 }
 
  function coBrowseCancelClick(){

    if(globalFirstName == ""){
      globalFirstName = getCookie_AA("glbCnm");
    }
	  //console.log('Declined cob_sId:'+cob_sId+'--cob_aId:'+cob_aId); 	
      lpTag.events.publish("lpCoBrowse", "cobrowseDeclined", {
		serviceId: cob_sId,
		agentId: cob_aId,
		visitorName: globalFirstName	
		}
		);
    delCookie("glbCnm");
		document.getElementById("coBrowseWrapper").style.display = 'none';
		document.getElementById("coBrowseWrapper").className = 'cobClose';
	   sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOSESSION","SUBCMD" : "COBROWSEREJECTED"});	
	   
 }
 function coBrowseAgreeClick(){

    if(globalFirstName == ""){
      globalFirstName = getCookie_AA("glbCnm");
    }
	
      lpTag.events.publish("lpCoBrowse", "cobrowseAccepted", {
		serviceId: cob_sId,
		agentId: cob_aId,
		visitorName: globalFirstName,
		ssid: getCookie_AA1('lesessionId'),
		svid: getCookie_AA1('levisitorId')
		}
		);
    delCookie("glbCnm");
		document.getElementById("coBrowseWrapper").style.display = 'none';
		document.getElementById("coBrowseWrapper").className = 'cobClose';
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOSESSION","SUBCMD" : "COBROWSEACCEPTED"}); 
		
 }
 
 
 function closeButtonClickedforEnterkey(e){
	 e = e || window.event;
				var key = (e.keyCode ? e.keyCode : e.which); 
	if (key == 13) {
		logger.debug("closeButtonClicked", "method is invoked");
		deletelpchatActiveCookie1('lpPopulation');
		try {
			omn_rmassistaction("Click","LiveChat_InChatSession-Close");
		}catch(e){
			//console.log("omn error LiveChat_InChatSession-Close");
		}
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "END_CHAT"});
	}
	/* if(document.activeElement.id === "lpChatEndChatBtn"){ //US1505870 - Tabbing issues
		document.getElementById("lpChatMinizeBtn").style.outline = "none";		
	}	
	if(key == "9"){
		document.getElementById("lpChatEndChatBtn").style.outline = "none";
	} */
	if(e.shiftKey && key == "9"){
		//document.getElementById("lpChatMinizeBtn").style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
		document.getElementById("lpChatMinizeBtn").focus();
		
		if (e.preventDefault) {
			e.preventDefault();
		}else{
			e.returnValue = false;
		}
	}
 }
  function closeButtonClickedforShiftTabkey(e){
	 e = e || window.event;
	var key = (e.keyCode ? e.keyCode : e.which); 
	if(e.shiftKey && key == "9"){
		document.getElementById("lpChatMinizeBtn").focus();
		//document.getElementById("lpChatMinizeBtn").style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
	}
 }
 function closeButtonClickedForMinforEnterkey(e){
	  e = e || window.event;
				var key = e.keyCode || e.which;
				if (key == 13) {
						closeButtonClickedForMin();
				}if (e.shiftKey && key == "9") {
						//document.getElementById("lpChatEndChatBtnMin").style.outline = "none"; //US1505870 - Tabbing issues
						document.getElementById("lpChatMaximizeBtn").focus();
						//document.getElementById("lpChatMaximizeBtn").style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
						if (e.preventDefault) {
							e.preventDefault();
						}else{
							e.returnValue = false;
						}
				}else if (key == "9") {

						
						document.getElementById("lpChatEndChatBtnMin").focus();
						//document.getElementById("lpChatEndChatBtnMin").style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
						if (e.preventDefault) {
							e.preventDefault();
						}else{
							e.returnValue = false;
						}
				}


 }
  var chatlogomin;
	var ccount;
	var stopanimate=false;
	
 function closeButtonClickedForMin(){
  logger.debug("closeButtonClicked for min", "method is invoked");
  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "END_CHAT"});
  var titleDiv = document.getElementById( 'lpChatTitleContainerMin' );
  var titleText = document.getElementsByClassName("lpChatHeaderText")[1];
  titleDiv.style.backgroundColor = "#002665";
  titleText.style.color = "white";
  if(document.getElementById("lpMessageIconPos").className.indexOf("animateIcon") != -1){
	document.getElementById("lpMessageIconPos").className = "lpChatTitleContainerLogo lpLeft lpCustSpriteBackground lpCustChatLogoSmall";
  }
  if(getCookie_AA1('lpPopulation') == "AUTOMATION")	
	titleText.innerHTML = "American Express Chat";
  else 
	titleText.innerHTML = "American Express Live Chat";	
  //document.getElementById("lpMessageIconPos").style.marginTop = "14px";
  stopanimate=true;
  document.getElementById('lpMessageIconPos').style.top="";
 }
 //invokes when browser is resize
 function onWinResizeEvent(){
  logger.debug("onWinResizeEvent", "...");
  adjustChatWizLocation();
 }
 
 /**
  * Adjust the embedded window to display a proper location depends on the logic inside the code
  */
 function adjustChatWizLocation(){
  var wizNewTop, wizNewLeft, top, bottom, left, right;
  var chatWizContainerOffset = getOffset(chatWizContainer); 
  var wizCurrentTop = chatWizContainerOffset.top;
  var wizCurrentLeft = chatWizContainerOffset.left;
  var winWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
  var winHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
  var wizWidth = chatWizContainer.offsetWidth;
  var wizHeight = chatWizContainer.offsetHeight;
  logger.debug("adjustChatWizLocation", "(win.width, win.height): ("+winWidth+", "+winHeight +") (widget.width, widget.height): (" + wizWidth+", " + wizHeight
       + ") (EW.top, EW.left): ("+ wizCurrentTop + ", " + wizCurrentLeft + ")");
  
  if(isDock){ 
   wizNewTop = winHeight - wizHeight;
   wizNewLeft = winWidth - wizWidth - lpCWTagConst.widgetMarginRight;
   
   if(wizNewTop >=0){
    //enough space for the height
    top ="auto";
    bottom ="0px";
   }else{
    //not enought space for the height
    top ="0px";
    bottom = "auto";
   }
   
   if(wizNewLeft >=0){
    //enough space for the width
    left = "auto";
    right = "0px";
   }else{
    //not enough space for the width
    left = "0px";
    right = "auto";
   }
   
  }else{
   wizNewTop = winHeight - wizHeight - wizCurrentTop;
   wizNewLeft = winWidth - wizWidth - wizCurrentLeft;
   logger.debug("adjustChatWizLocation", "new (EW.top, EW.left):("+ wizNewTop + ", " + wizNewLeft+")");
  
   //reaching to the top, adjust to fit window
   if(wizNewTop < 0)
    wizNewTop = winHeight - wizHeight;
   else
    wizNewTop = wizCurrentTop;
   
   //if passing out the top range, at least visible the top 
   if(wizNewTop < 0){
    wizNewTop = 0;
   }
   
   //if reaching to left, adjust left to fit window
   if(wizNewLeft < 0)
    wizNewLeft = winWidth - wizWidth;
   else
    wizNewLeft = wizCurrentLeft;
   
   //if passing out of left range, at least visible from the left
   if(wizNewLeft < 0)
    wizNewLeft = 0;
   
   bottom = "auto";
   right = "auto";
   left = wizNewLeft + "px";
   top = wizNewTop + "px";
  }
  
  logger.debug("adjustChatWizLocation", "FINAL (EW.top, EW.left, EW.bottom, EW.right) : ("+ top + ", "+ left+", " + bottom + ", " + right + ")");
  
  chatWizContainer.style.bottom = bottom;
  chatWizContainer.style.right = right;
  chatWizContainer.style.left = left;
  chatWizContainer.style.top = top;
 }
 
 //invokes to adjust embedded window size to make it larger to accomodate PCI widget
 function adjustWindowSizeForPCI(){
  logger.debug("adjustWindowSizeForPCI", "...");
  chatWizContainer.style.width="700px";
  chatiFrameContainer.style.width = "700px";
  chatiFrame.style.width = "700px";
  logger.debug("adjustWindowSizeForPCI", "1top="+chatWizContainer.style.top+", "+chatWizContainer.style.left);
  
  var newLeft = parseInt(chatWizContainer.style.left) - 300;
  if(newLeft < 0 )
   newLeft = 0;
  chatWizContainer.style.left = newLeft+"px";
 }
 
 //invokes to adjust embedded window to a standard size without PCI widget
 function adjustWindowSizeNonePCI(){
  logger.debug("adjustWindowSizeNonPCI", "...");
  logger.debug("adjustWindowSizeNonPCI", "top="+chatWizContainer.style.top+", "+chatWizContainer.style.left);
  chatiFrameContainer.style.width = "100%";
  chatiFrame.style.width = "100%";
  
  //adjust window location
  var originalLeft = parseInt(chatWizContainer.style.left);
  var chatWizContainerWidth = parseInt(chatWizContainer.style.width);
  logger.debug("adjustWindowSizeNonPCI", "width="+chatWizContainer.style.width);
  if(chatWizContainerWidth > 400){
   originalLeft += 300 ;
  }
  
  chatWizContainer.style.width = "100%";
  chatWizContainer.style.left = originalLeft+"px";
  
  logger.debug("adjustWindowSizeNonPCI", "originalLeft="+originalLeft+", " + "top="+chatWizContainer.style.top+", "+chatWizContainer.style.left);
 }
 
/** Invokes to handle minimize embedded window */
function showMinimizeHandler(minmax) {
  try{
  logger.debug("showMinimizeHandler", "method is invoked");
 if(window.location.hostname === "global.americanexpress.com"){
		chatWizContainer.style.zIndex = 10500;
	} 
	try {
		if(document.querySelectorAll("#lpChatWizContainer.res_Small").length > 0 || device.mobile()) {
			/** US1615785: iPhone scrolling - Mobile web only */
			/** Enabling MYCA scrolling immediately when CM click on minimize icon */
			/** Added code required for background MYCA scroll prevention */
			if (isIPhone && !isIOSChrome) {
				document.body.style.overflowY = "auto";
				document.body.style.position = "";
			}
			//document.querySelector('body>*:not(#lpChatWizContainer)').style.filter = "blur(0px)";
			removeblurfromparent();
			/** US1633609: Disable Pinch to Zoom - Mobile Web Only */
			var viewport = document.querySelector("meta[name=viewport]");
			if (typeof viewport !== "undefined" && viewport != null) {
				viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=yes');
			}
			var sheetToBeRemoved = document.getElementById('qfb');
			var sheetParent = sheetToBeRemoved.parentNode;
			sheetParent.removeChild(sheetToBeRemoved);
			setTimeout(function(){ window.scroll(mycaScrollX, mycaScrollY); }, 5);
		}
	} catch(e) {}
  
 if(typeof document.getElementById("coBrowseWrapper") != "undefined" && document.getElementById("coBrowseWrapper") != null){
   document.getElementById("coBrowseWrapper").style.display = "none";
  }
	// US1615751 - End chat confirmation screen 
	if(!confirmDispalyFlag && document.getElementById("mainpageoverlay").style.display == 'block' &&  document.getElementById("mainpageprompt").style.display == 'block') {
		document.getElementById("mainpageoverlay").style.display = "none";
		document.getElementById("mainpageprompt").style.display = "none";
		confirmDispalyFlag = true;
	}
  //document.getElementById('lpChatMinizeBtn').style.outline = 'none'; //US1505870 - Tabbing issues
  chatWizContainer.style.bottom = "20px";
  chatWizContainer.style.right = "0px";
  chatWizContainer.style.left = "auto";
  chatWizContainer.style.top = "auto";
     document.getElementById('lpChatWizContainer').style.boxShadow = 'none';
     document.getElementById('lpChatWizContainer').style.width = '';
   if(isPremExp==true)
	chatWizContainer.style.right = "300px";
  
  hideElement(chatiFrameContainer);
                  document.getElementById('lpChatTitleContainer').style.display = 'none'; 
  document.getElementById('lpChatTitleContainerMin').style.display = 'block'; 

  	 document.getElementsByClassName("lpChatHeaderTextmin")[0].innerHTML="Chat"; 	
        document.getElementById('lpChatTitleContainerMin').style.width="101px";

  
  var chatIconMinBtnImg = getElement("lpChatMinizeBtnImg");
  var newClasses = deleteAppendStyleClass(chatIconMinBtnImg, "lpCustChatIconMinimize", "lpCustChatIconMinimize");
  chatIconMinBtnImg.className = newClasses;
 
  var chatIconMinBtn = getElement("lpChatMinizeBtn");
  chatIconMinBtn.setAttribute("data-msg", lpCWTagConst.lpChatTitleMinimize);
  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "FLASHING", "value" : "MINIMIZED", "MSG": "" });
  chatMaximize = false;
	if(typeof minmax != "undefined"){
		document.getElementById('lpChatWizContainer').style.display = "block";
	}
  try {
	omn_rmassistaction("Click","LiveChat_InChatSession-Minimize");
  }catch(e){
	//console.log("omn error LiveChat_InChatSession-Minimize");  
  }
  }catch(e){}
 }
 
 
 function showMinimizeHandlerforEnterKey(e){
	  e = e || window.event;
				var key = (e.keyCode ? e.keyCode : e.which); 
				if (key == 13) {
						showMinimizeHandler();
						document.getElementById('lpChatMaximizeBtn').focus();	
						//document.getElementById('lpChatMaximizeBtn').style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
				}
				if (e.shiftKey && key == "9") {

						document.getElementById('lpChatMinizeBtn').focus();	
						//document.getElementById("lpChatMinizeBtn").style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
						if (e.preventDefault) {
							e.preventDefault();
						}else{
							e.returnValue = false;
						}
				}
				/*else if (key == "9") { //US1505870 - Tabbing issues
						document.getElementById("lpChatMinizeBtn").style.outline = "none";							
						document.getElementById("lpChatEndChatBtn").style.outline = "2px solid #265AB1";
				}*/
	/*try{		
		omn_rmassistaction("Click","LiveChat_InChatSession-Minimize");
	}catch(e){
		console.log("omn error in LiveChat_InChatSession-Minimize");
	}*/

 }
 function showMaximizeHandlerforEnterKey(e){
	 e = e || window.event;
				var key = e.keyCode || e.which;
				if (key == 13) {
						showMaximizeHandler(false);
						document.getElementById('lpChatMinizeBtn').focus();	
						//document.getElementById('lpChatMinizeBtn').style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
				}if (e.shiftKey && key == "9") {
						
						document.getElementById('lpChatMaximizeBtn').focus();
						//document.getElementById("lpChatEndChatBtnMin").style.outline = "none"; //US1505870 - Tabbing issues
						//document.getElementById('lpChatMaximizeBtn').style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
						if (e.preventDefault) {
							e.preventDefault();
						}else{
							e.returnValue = false;
						}

				}
				/*else if (key == 9) { //US1505870 - Tabbing issues
						document.getElementById('lpChatMaximizeBtn').style.outline = "none";
						document.getElementById("lpChatEndChatBtnMin").style.outline = "2px solid #265AB1";
				}*/
	/*try{
		omn_rmassistaction("Click","LiveChat_InChatSession-Maximize");
	}catch(e){
		console.log("omn error LiveChat_InChatSession-Maximize");
	}*/
 }
 
	// Invokes to handle maximize embedded window
	function showMaximizeHandler(fromInvite) {
		try {
			logger.debug("showMaximizeHandler", "method is invoked");
			if(window.location.hostname === "global.americanexpress.com") {
				chatWizContainer.style.zIndex = 100;
				try {
					/** iPhone Only: Fixed chat window is in background when Balance Details layer is on */
					var modelContentFullScreen = document.getElementsByClassName("modal modal-screen modal-fade");
					if (isIPhone && typeof modelContentFullScreen !== "undefined" && null != modelContentFullScreen) {
						if (null != modelContentFullScreen[0] && null != modelContentFullScreen[0].parentElement && null != modelContentFullScreen[0].parentElement.style && null != modelContentFullScreen[0].parentElement.style.zIndex) {
							chatWizContainer.style.zIndex = parseInt(modelContentFullScreen[0].parentElement.style.zIndex) + 1;
						} else {
							chatWizContainer.style.zIndex = 300;
						}
					}
				} catch (ex) {}
			}
			/*--US1635263 Widgets to be opened in minimized state--*/
			if(pollforheight) {
				sendPostMessageToRCWidget({"lpEmbChatWiz": "LPNVCF", "CMD" : "RESENDHGT"});
				pollforheight = false;  
			}

			try {
				if((document.querySelectorAll("#lpChatWizContainer.res_Small").length > 0 || device.mobile())&& !fromInvite) {
					if(document.getElementById("qfb") == null) {
						var qFBsheet = document.createElement('style'); qFBsheet.id = "qfb";
						qFBsheet.innerHTML = ".QSIFeedBackLink {display:none !important} .QSIPopOver {z-index:99 !important};";
						document.body.appendChild(qFBsheet);
					}
				}
			} catch(e) {}
			if(typeof document.getElementById("coBrowseWrapper") != "undefined" && document.getElementById("coBrowseWrapper") != null && document.getElementById("coBrowseWrapper").className == "cobOpen") {
				document.getElementById("coBrowseWrapper").style.display = "block";
			} 
			// US1615751 - End chat confirmation screen 
			if(confirmDispalyFlag) {
				document.getElementById("mainpageoverlay").style.display = "block";
				document.getElementById("mainpageprompt").style.display = "block";
				confirmDispalyFlag = false;
			}
			if(document.getElementById("showMsgCount")) {
				document.getElementById("showMsgCount").style.display='none';
			}
			showElement(chatiFrameContainer);
			//document.getElementById('lpChatMaximizeBtn').style.outline = 'none';  //US1505870 - Tabbing issues
			document.getElementById('lpChatTitleContainer').style.display = 'block';
			document.getElementById('lpChatTitleContainerMin').style.display = 'none'; 
			document.getElementById('lpChatWizContainer').style.boxShadow = '0 0 2em #666666';

			if((document.querySelectorAll("#lpChatWizContainer.res_Small").length > 0 || device.mobile()) && !fromInvite) {
				if(document.getElementById("lpChatTitleContainer").style.display != "none") {
					//document.querySelector('body>*:not(#lpChatWizContainer)').style.filter = "blur(2px)";
					addblurtoparent();
				}
				/** US1615785: iPhone scrolling - Mobile web only */
				/** Added code required for background MYCA scroll prevention */
				if (isIPhone && !isIOSChrome) {
					document.body.style.overflowY = "hidden";
					document.body.style.position = "fixed";
				}
				/** US1633609: Disable Pinch to Zoom - Mobile Web Only */
				var viewport = document.querySelector("meta[name=viewport]");
				if (typeof viewport !== "undefined" && viewport != null) {
					viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
				} else {
					var metaTag = document.createElement('meta');
					metaTag.name = "viewport"
					metaTag.content = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
					document.getElementsByTagName('head')[0].appendChild(metaTag);
				}
			}

			adjustChatWizLocation();

			var chatIconMinBtnImg = getElement("lpChatMaximizeBtnImg");
			var newClasses = deleteAppendStyleClass(chatIconMinBtnImg, "lpCustChatIconMaximize", "lpCustChatIconMaximize");
			chatIconMinBtnImg.className = newClasses;

			var chatIconMinBtn = getElement("lpChatMaximizeBtn");
			chatIconMinBtn.setAttribute("data-msg", lpCWTagConst.lpChatTitleMaximize);

			logger.debug("showMaximizeHandler", "flashingStop....before");
			flashingStop();
			logger.debug("showMaximizeHandler", "flashingStop....after");
			sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "FLASHING", "value" : "MAXIMIZED", "MSG": "" });
			chatMaximize = true;

			chatWizContainer.style.top = setTopOffPositionValue + "px";
			chatWizContainer.style.left = setLeftOffPositionValue + "px";  
			try {
				if(typeof omn_rmassistaction!= "undefined" && omn_rmassistaction!= null)
				omn_rmassistaction("Click","LiveChat_InChatSession-Maximize");
			} catch(e) {
				//console.log("omn error in LiveChat_InChatSession-Maximize"); 
			}
			// US1629580 Landscape mode
			onlandscapeorientation();
			/** Get current window scroll positions */
			mycaScrollX = Math.round(window.pageXOffset);
			mycaScrollY = Math.round(window.pageYOffset);
		} catch(e) {}
	}
 
 //invokes when minimize or maximize button is clicked
 function minimzeMaximizeButtonClick() {
  logger.debug("minimzeMaximizeButtonClick", "method is invoked");
  
  if(chatMaximize){
   showMinimizeHandler();
  }else{
   showMaximizeHandler();
  }
 }
 
 /**
  * Handle the end chat
  */
 function endChat(){
  try{ 
  logger.debug("endChat", "method is invoked");
  chatlastrefreshtime = 0;
  document.getElementById("lpChatEndChatBtn").style.outline = "none";
  document.getElementById("lpChatEndChatBtnMin").style.outline = "none";
  if(typeof(Bootstrapper) != "undefined")
	  document.getElementById("lpChatWizContainer").className = "lp_"+Bootstrapper.ensMarket+ " res_"+C2C.RWD.deviceBucket + " res_"+C2C.RWD.roundedWidth;
  delCookie("lp_flg");
  isChatActive = false;
  showChatWizContainerVisibility(false);
  dockButtonHandler(); 
  clearInterval(webserviceTimer);
  }catch(e){}
 }
 
 /**
  * make flashing to the page title
  */
 function flashMainPageTitle(){
  originalSiteTitle = document.title;
  titleTimer = setInterval(function(){
    logger.debug("flashMainPageTitle", "originalSiteTitle...."+originalSiteTitle);
    if (document.title == lpCWTagConst.lpNewChatMsgArrive){
     document.title = originalSiteTitle;
    }else{
     document.title = lpCWTagConst.lpNewChatMsgArrive;
    }
   }, 800);
 }

 // invokes when there is a new message arrived and embedded window in minimized state
 function flashingStart(){
  /*var defaultColor = 1;
  if(lpCWTagConst.enableSiteTitleFlashing)
   originalSiteTitle = document.title;
   
  if (typeof lpCWTagConst.lpTitleFlashingTimer == "undefined") {
   logger.debug("lpFlashingStart", " starting...");
   lpCWTagConst.lpTitleFlashingTimer = setInterval(function(){ 
       var titleDiv = getElement( 'lpChatTitleContainer' );
       var titleText = getElement('lpChatTitleTxt');
   var msgIconPos = getElement('lpMessageIconPos');
       if(defaultColor == 1){
        titleDiv.style.backgroundColor = '#335184';
        titleText.style.color = "#ffeb37";
    msgIconPos.style.maringTop = "-9px";
        defaultColor = 0;
       }else{
        titleDiv.style.backgroundColor = '#335184';
        titleText.style.color = "white";
    msgIconPos.style.maringTop = "14px";
        defaultColor = 1;
       }
       
       if(lpCWTagConst.enableSiteTitleFlashing){
      if (document.title == lpCWTagConst.lpNewChatMsgArrive){
       document.title = originalSiteTitle;
      }else{
       document.title = lpCWTagConst.lpNewChatMsgArrive;
      }
     }
      }, 1000);
   }*/ 
  logger.debug("in lpFlashingStart", " starting...");
    var titleDiv = document.getElementById( 'lpChatTitleContainerMin' );
       var titleText = document.getElementsByClassName("lpChatHeaderText")[1];
     document.getElementById( 'lpChatTitleContainerMin').className="flashButton";
    //document.getElementById("lpMessageIconPos").style.marginTop = "-9px";
  
    logger.debug("in lpFlashingStart::", titleDiv.style.backgroundColor);
    logger.debug("in lpFlashingStart::", titleText.style.color);
    logger.debug("in lpFlashingStart::", msgIconPos.style.maringTop);
  logger.debug("in lpFlashingStart", " stopping...");
    
 }
 
 // Stop flashing when embedded window is in maximized state
 function flashingStop(){
  logger.debug("lpFlashingStop", " stoppping...");
  
  var titleDiv = document.getElementById( 'lpChatTitleContainerMin' );
     var titleText = document.getElementsByClassName("lpChatHeaderText")[1];
     var removeFlash = document.getElementById( 'lpChatTitleContainerMin');
     removeFlash.className = '';
     var msgIconPos = document.getElementById('lpMessageIconPos');  
  clearInterval(lpCWTagConst.lpTitleFlashingTimer);
  titleDiv.style.backgroundColor = "#002665";
  titleText.style.color = "white";
  if(document.getElementById("lpMessageIconPos").className.indexOf("animateIcon") != -1){
 document.getElementById("lpMessageIconPos").className = "lpChatTitleContainerLogo lpLeft lpCustSpriteBackground lpCustChatLogoSmall";
  }  
  //document.getElementById("lpMessageIconPos").style.marginTop = "14px";
  stopanimate=true;
  document.getElementById('lpMessageIconPos').style.top="";
  
  lpCWTagConst.lpTitleFlashingTimer = undefined;
  if(lpCWTagConst.enableSiteTitleFlashing){
   document.title = originalSiteTitle;
   originalSiteTitle = "";
  }
  logger.debug("lpFlashingStop", " stoppping... ending");
 }
 //code for animation icon
 function chaticonmoveup(){
if(!stopanimate){
	ccount++;
	chatlogomin.style.top = parseInt(chatlogomin.offsetTop)-1+'px';
	if(ccount<27)
		setTimeout(chaticonmoveup,15);
	else{ccount=0;
		chaticonmovedown();
		}
}
}
function chaticonmovedown(){
if(!stopanimate){
	ccount++;
	chatlogomin.style.top = parseInt(chatlogomin.offsetTop)+1+'px';
	if(ccount<27)
		setTimeout(chaticonmovedown,15);
	else{ccount=0;
		chaticonmovehalfup();
		}
}
}
function chaticonmovehalfup(){
if(!stopanimate){
	ccount++;
	chatlogomin.style.top = parseInt(chatlogomin.offsetTop)-1+'px';
	if(ccount<7)
		setTimeout(chaticonmovehalfup,15);
	else{ccount=0;
		chaticonsmovehalfdown();
		}
}
}
function chaticonsmovehalfdown(){
if(!stopanimate){
	ccount++;
	chatlogomin.style.top = parseInt(chatlogomin.offsetTop)+1+'px';
	if(ccount<7)
		setTimeout(chaticonsmovehalfdown,15);
	else{ccount=0;
		setTimeout(chaticonmoveup,500);
		}
}
}
 
 //make embedded window visible
function showChatWizContainerVisibility(bVal, minmax) {
  try{
  logger.debug("showChatWizContainerVisibility", "...");
  if(bVal){  
		if(typeof minmax == "undefined") {
			showElement(chatWizContainer);

			document.getElementsByClassName("lpChatHeaderTextmin")[0].innerHTML="Chat";
			document.getElementById('lpChatTitleContainerMin').style.width="100px";

			sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "CHAT_LOADED"});
			try {
				if(document.querySelectorAll("#lpChatWizContainer.res_Small").length > 0 || device.mobile()) {
					if(document.getElementById("qfb") == null) {
						var qFBsheet = document.createElement('style'); qFBsheet.id = "qfb";
						qFBsheet.innerHTML = ".QSIFeedBackLink {display: none !important} .QSIPopOver {z-index:99 !important};";
						document.body.appendChild(qFBsheet);
					}
					if(document.getElementById("lpChatTitleContainer").style.display != "none") {
						//document.querySelector('body>*:not(#lpChatWizContainer)').style.filter = "blur(2px)"; 
						addblurtoparent();
						/** US1615785: iPhone scrolling - Mobile web only */
						/** Added code required for background MYCA scroll prevention */
						if (isIPhone && !isIOSChrome) {
							document.body.style.overflowY = "hidden";
							document.body.style.position = "fixed";
						}
					}
					/** US1633609: Disable Pinch to Zoom - Mobile Web Only */
					var viewport = document.querySelector("meta[name=viewport]");
					if (typeof viewport !== "undefined" && viewport != null) {
						viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no');
					} else {
						var metaTag = document.createElement('meta');
						metaTag.name = "viewport"
						metaTag.content = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
						document.getElementsByTagName('head')[0].appendChild(metaTag);
					}
				}
			} catch(e) {}
		} else {
			hideElement(chatWizContainer); 
			document.getElementsByClassName("lpChatHeaderTextmin")[0].innerHTML="Chat";
			document.getElementById('lpChatTitleContainerMin').style.width="100px";
			showMinimizeHandler("minimize");
		}
	} else {
		hideElement(chatWizContainer); 
		try {
			if(document.querySelectorAll("#lpChatWizContainer.res_Small").length > 0 || device.mobile()) {
				/** US1615785: iPhone scrolling - Mobile web only */
				/** Enabling MYCA scrolling immediately when CM click on minimize icon */
				/** Added code required for background MYCA scroll prevention */
				if (isIPhone && !isIOSChrome) {
					document.body.style.overflowY = "auto";
					document.body.style.position = "";
				}
				//document.querySelector('body>*:not(#lpChatWizContainer)').style.filter = "blur(0px)";
				removeblurfromparent();
				/** US1633609: Disable Pinch to Zoom - Mobile Web Only */
				var viewport = document.querySelector("meta[name=viewport]");
				if (typeof viewport !== "undefined" && viewport != null) {
					viewport.setAttribute('content', 'width=device-width, initial-scale=1.0, user-scalable=yes');
				}
				var sheetToBeRemoved = document.getElementById('qfb');
				var sheetParent = sheetToBeRemoved.parentNode;
				sheetParent.removeChild(sheetToBeRemoved);
			}
			//console.log("binding show minimize");
		} catch(e) {}
	}
  }catch(e){}
}
 
 /* make html for blue header with dock, minimize and close button */
 function makeHeader() {
   var headerStr = "";
   try{
   headerStr = '<div id="lpChatTitleContainer" class="lpRight">'
	+ makeHeaderContent()
    + '</div>';
   }catch(e){}
    return headerStr;
 }
 	/** Added for RWD Feature changes*/
	myUI.remakeHeaderOnResize = function() {
		//console.log('RWD Feature changes ----------> making Header on resize');
    try{
		var lpChatTitleContainerDiv = getElement("lpChatTitleContainer");
		lpChatTitleContainerDiv.innerHTML = makeHeaderContent();
		myUI.rebindHeaderEvents();
    }catch(e){}
	}

	/** rebindHeaderEvents unbinds all the header elements events and re-binds them again */
	myUI.rebindHeaderEvents = function(){
		unBindEvent(getElement("lpChatMinizeBtn"), "click", showMinimizeHandler);
		bindEvent(getElement("lpChatMinizeBtn"), "click", showMinimizeHandler);
		unBindEvent(getElement("lpChatMinizeBtn"), "keydown", function(){showMinimizeHandlerforEnterKey(event);});
		bindEvent(getElement("lpChatMinizeBtn"), "keydown", function(){showMinimizeHandlerforEnterKey(event);});
		unBindEvent(getElement("lpChatMinizeBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatMinizeBtn") } );
		bindEvent(getElement("lpChatMinizeBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatMinizeBtn") } );
		unBindEvent(getElement("lpChatMinizeBtn"), "mouseout", removeMouseOverToolTip);
		bindEvent(getElement("lpChatMinizeBtn"), "mouseout", removeMouseOverToolTip);

		unBindEvent(getElement("lpChatEndChatBtn"), "click", closeButtonClicked); 
		bindEvent(getElement("lpChatEndChatBtn"), "click", closeButtonClicked); 
		unBindEvent(getElement("lpChatEndChatBtn"), "keydown", function(){closeButtonClickedforEnterkey(event);}); 
		bindEvent(getElement("lpChatEndChatBtn"), "keydown", function(){closeButtonClickedforEnterkey(event);}); 
		unBindEvent(getElement("lpChatEndChatBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatEndChatBtn") });
		bindEvent(getElement("lpChatEndChatBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatEndChatBtn") });
		unBindEvent(getElement("lpChatEndChatBtn"), "mouseout", removeMouseOverToolTip);
		bindEvent(getElement("lpChatEndChatBtn"), "mouseout", removeMouseOverToolTip);

		unBindEvent(getElement("lpChatTitleDragArea"), "mousedown", showGrabPointer);
		bindEvent(getElement("lpChatTitleDragArea"), "mousedown", showGrabPointer);
		unBindEvent(getElement("lpChatTitleDragArea"), "mouseup", hideGrabPointer);
		bindEvent(getElement("lpChatTitleDragArea"), "mouseup", hideGrabPointer);
		unBindEvent(getElement("lpChatTitleDragArea"), "mouseleave", hideGrabPointer);
		bindEvent(getElement("lpChatTitleDragArea"), "mouseleave", hideGrabPointer);
	}
/**
 * Below method returns the responsive chat header content for small and medium-large devices.
 * For styling css class names wih notation res_<device>_<orientation> are used in stylesheets.
 */
 function makeHeaderContent() {
   var headerContentStr = "";
   try{
  var isSmDevice = (C2C.RWD.deviceBucket != null && C2C.RWD.deviceBucket.indexOf('Small') !== -1);
  //console.log('RWD Feature changes ----------> is small device ',isSmDevice);
  var chatTitle = isSmDevice ? lpCWTagConst.lpSmDevChatTitleVal : lpCWTagConst.lpChatTitleVal;
  //console.log('RWD Feature changes ----------> chat title ',chatTitle);
  headerContentStr = (isSmDevice ? ('<div class="lpLeft lpHeaderActionbuttonsContainer" style="">' 
	+ '<div class="lpHeaderActionbuttons lpHoverButton lpPointer" data-msg="Minimize" id="lpChatMinizeBtn" tabindex="0">'
	+ '<span id="lpChatMinizeBtnImg" class="lpPointer lpCustSpriteBackground lpCustChatIconMinimize" ></span></div>'
	+ '</div>') : '') // minimize icon to the left for small devices
  	+'<div id="lpChatTitleDragArea" class="lpLeft"><div class="lpLeft lpChatLogoContainer"><span class="lpChatTitleContainerLogo lpLeft lpCustSpriteBackground lpCustChatLogoSmall lpChatHeaderIcon" ></span></div>'
    + '<div id="lpChatTitleTxt" class="lpLeft lpChatHeaderText noselect" unselectable="on">' + chatTitle + '</div></div>'
    + '<div class="lpRight lpHeaderActionbuttonsContainer" style="">' 
    + (isSmDevice ? '' : '<div class="lpHeaderActionbuttons lpHoverButton lpPointer" data-msg="Minimize" id="lpChatMinizeBtn" tabindex="0"><span id="lpChatMinizeBtnImg" class="lpPointer lpCustSpriteBackground lpCustChatIconMinimize" ></span></div>') // minimize icon to the right for medium and large devices
    + '<div class="lpHeaderActionbuttons lpHoverButton lpPointer" data-msg="End Chat" id="lpChatEndChatBtn" tabindex="0"><span class="lpPointer lpCustSpriteBackground lpCustChatIconClose"></span></div>'
	+ '</div><div class="lpClear"></div>'
	+ '</div><div class="lpClear">';
   }catch(e){}
    return headerContentStr; 
 }
 /* make html for blue header with dock, minimize and close button */
 function makeHeaderForMin() {
  var lpMinHeader = document.createElement('div');
  lpMinHeader.id = 'lpChatTitleContainerMin';
  lpMinHeader.className = 'lpRight';
  lpMinHeader.style.display="block";
  lpMinHeader.innerHTML = '<div id="lpChatTitleDragAreaMin" class="lpLeft"><div class="lpLeft"><span id="lpMessageIconPos" class="lpChatTitleContainerLogo lpLeft lpCustSpriteBackground lpCustChatLogoSmall lpChatHeaderIcon"><span id="showMsgCount" style="display:none;"></span></span></div><div id="lpChatTitleTxt" class="lpLeft lpChatHeaderText noselect lpChatHeaderTextmin" unselectable="on">Chat</div><div class="lpRight lpHeaderActionbuttonsContainer" style=""><div class="lpHeaderActionbuttons lpHoverButton lpPointer" data-msg="Maximize" id="lpChatMaximizeBtn" tabindex="0"><span id="lpChatMaximizeBtnImg" class="lpPointer lpCustSpriteBackground lpCustChatIconMaximize"></span></div></div></div><div class="lpHeaderActionbuttons lpHoverButton lpPointer" data-msg="End Chat" id="lpChatEndChatBtnMin" tabindex="0"><span class="lpPointer lpCustSpriteBackground lpCustChatIconClose"></span></div><div class="lpClear"></div>';
  chatWizContainer.appendChild(lpMinHeader);    
 }
 
// US1587670  Disable Landscape Mode - Mobile Web Only
function makeLandscapeDivForMin() {
  try{
	if(!document.getElementById('landscapeDiv'))
	{
		var landscapeDiv = document.createElement('div');
		landscapeDiv.id = 'landscapeDiv'; 
		landscapeDiv.style.display="none"; 
		landscapeDiv.innerHTML = '<div class="rotate-div"><div class="rotate-img"><img src="https://icm.aexp-static.com/content/dam/chat/prod/lechat/img/Rotate-Device.png" ></div><div class="rotate-text">Please rotate your device</div></div>';
		chatWizContainer.appendChild(landscapeDiv);       
	}
  }catch(e){}  
 }
 
 
 /* make hover message for dock, minimize and close button */
 function makeHoverDiv(msg, pDownArrow) {
  removeMouseOverToolTip();
  
  var messageDiv = document.createElement('div');
  messageDiv.className = pDownArrow?'lpBubbleUp':'lpBubbleDown';
  messageDiv.id = "lpToolTipContent";
  messageDiv.innerHTML = msg;
  return messageDiv;
 }
 
 // remove hover tool-tip div
 function removeMouseOverToolTip() {
  logger.debug("removeMouseOverToolTip", "delete tooltip");
  removeElement(getElement("lpToolTipContent"));
 }

 
 myUI.endChatRequest = function(){
  closeButtonClicked();
 }
 
 myUI.debugEnable = function(){
  lpCWTagConst.DEBUG_ENABLE = true;
  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DEBUG", "value" : "ENABLE"});
 }
 
 myUI.debugDisable = function(){
  lpCWTagConst.DEBUG_ENABLE = false;
  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DEBUG", "value" : "DISABLE"});
 }
 
 myUI.debug = function(pLogName, pData) {
  logger.debug(pLogName, pData);
 }

 myUI.startSMSFlow = function(data) {
   var bbCookie = getCookie_AA('blueboxpublic');
   var cType = "US-SMS-en-GCA";
   if(smsChat_pageName === "nl-help") {
    sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "lpStartChatButtonClicked","pageurl": location.search.substring(1),"nuanceFlowFlag":"","sendAddlineTrigger":true,"xcutobj":"","bbCookie":bbCookie,"lpexpansion":"sms","jwtValue":"","sidvid":"","cType":cType,"skill" : cType,"firsttimelogin":false,"visitorId":sms_data.svid,"sessionId":sms_data.ssid,"interactionContextId":data.scid,"cid":sms_data.cid,"eid":sms_data.eid,"chatPriority":false,"isSMSChat" : true});
   } else {
     sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "lpStartChatButtonClicked","pageurl": location.search.substring(1),"nuanceFlowFlag":"","sendAddlineTrigger":true,"xcutobj":"","bbCookie":bbCookie,"lpexpansion":"sms","jwtValue":"","sidvid":"","cType":cType,"skill" : cType,"firsttimelogin":false,"visitorId":data.svid,"sessionId":data.ssid,"interactionContextId":data.scid,"cid":data.cid,"eid":data.eid,"chatPriority":false,"isSMSChat" : false, "lpexpansion":"credit", "smspage":"payment"});
   }
 }
 
 myUI.updateOrientation = function(deviceBucket, roundedWidth) {
	 //console.log("window.innerHeight:: "+window.innerHeight);
  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "ORIENTATION", "deviceBucket" : C2C.RWD.deviceBucket, "roundedWidth" : C2C.RWD.roundedWidth, "deviceHeight":window.innerHeight});
    sendPostMessageToRCWidget({"CMD" : "LENO_ORIENTATION","deviceBucket" : C2C.RWD.deviceBucket, "roundedWidth" : C2C.RWD.roundedWidth, "deviceHeight":window.innerHeight});
 }
 myUI.loadChat  = function(data) {
  logger.debug("loadChat", "method invoked");
  lpChatBuildFrame(false);
  // getBlueBoxValue();
	var iFrameContentTimerCounter = 0;
  var iFrameContentTimer = setInterval(function(){
     iFrameContentTimerCounter += 500;
     if(iFrameContentTimerCounter >= 30000){
      clearInterval(iFrameContentTimer);
      logger.info("loadChat", "iframe content exceeded maximun load time of " + iFrameContentTimerCounter + " seconds. Suggest to reload page");
     }else{
       try{
          logger.debug("loadChat", "waiting for iFrame content to load..chatFrameLoaded="+chatFrameLoaded); 
           if(chatFrameLoaded){
		    if(smsForChat) {
			  clearInterval(iFrameContentTimer);
	          myUI.startSMSFlow(data);   
	        } else {
            logger.debug("loadChat", "iFrame content fully loaded"); 
            if(typeof lpTag != "undefined" && typeof lpTag.exp_value != "undefined" && lpTag.exp_value!="")
				expansionFlag = lpTag.exp_value;
		
		var bbCookie = getCookie_AA('blueboxpublic');		
		var xcutobj = getCrossCutData();
		lenosToken = getDataFromCrossCut(xcutobj, xcutType, 'sToken');
        var logsToken = lenosToken;

   
   var defaultSkill = 'offline';
		if (typeof window.lpChatSkill != "undefined") {
   			defaultSkill = window.lpChatSkill;
  		}

	if(document.getElementById("oceLayer")!=null)
		firsttimelogin ="true";	
	
    var cType="";
    if(typeof lpTag.sdes.get("ctmrinfo")!="undefined" && typeof lpTag.sdes.get("ctmrinfo")[0] !="undefined" && typeof lpTag.sdes.get("ctmrinfo")[0].info !="undefined"){
		cType = lpTag.sdes.get("ctmrinfo")[0].info.ctype;
	}	
  /* if(typeof lpTag !="undefined" && typeof lpTag.section !="undefined" && lpTag.section != null && lpTag.section!=""){
     if(typeof lpTag.section == "string" && lpTag.section == "US Personal Loans Application" || lpTag.section == "US Personal Loans"){
      cType = "US-PersonalLoans-en-Standard";
    }else if(typeof lpTag.section == "object" && lpTag.section.length > 0){
      try{
       if(lpTag.section.includes("US Personal Loans Application") || lpTag.section.includes("US Personal Loans")){
         cType = "US-PersonalLoans-en-Standard";
       }
      }catch(e){}       
    } 
  } */
		
	var sidvid="";
    if(typeof lpTag.taglets !="undefined" && typeof lpTag.taglets.lp_monitoringSDK !="undefined"){
		sidvid = lpTag.taglets.lp_monitoringSDK.getVid();
	}	
       var jwtTimer = setInterval(function(){
		 if(jwtValue!=="") { 
		    clearInterval(jwtTimer);
      /*-- Wait until the bbValue is returned from the service --*/  

      try{   
      var corrId = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)+'-'+Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);   
      invokeUILog(corrId,"INFO"," blueboxpublic:"+getCookie_AA("blueboxpublic")+" chatPriority:"+intiatedFromChatPrioritization+" sToken:"+lenosToken+" OverallPriority:"+JSON.parse(xcutobj).creditPriority);
      }catch(e){}       
			sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "CONTROL", "value" : "lpStartChatButtonClicked","pageurl": location.search.substring(1),"nuanceFlowFlag":lpTestPopulation.toUpperCase(),"sendAddlineTrigger":true,"xcutobj":xcutobj,"bbCookie":bbCookie,"lpexpansion":expansionFlag,"jwtValue":"","sidvid":sidvid,"cType":cType,"skill" : cType,"firsttimelogin":firsttimelogin,"visitorId":data.svid,"sessionId":data.ssid,"interactionContextId":data.scid,"cid":data.cid,"eid":data.eid,"chatPriority":intiatedFromChatPrioritization});
      intiatedFromChatPrioritization = false;
			setlpchatActiveCookie1('levisitorId',data.svid);
			setlpchatActiveCookie1('lesessionId',data.ssid);
			setlpchatActiveCookie1('leinteractionContextId',data.scid);
			setlpchatActiveCookie1('lecid',data.cid);
			setlpchatActiveCookie1('leeid',data.eid);
			setlpchatActiveCookie2("lpToken",lenosToken);


		 }  	      
		}, 500);
 		showMaximizeHandler(true); 
         clearInterval(iFrameContentTimer);
        }
       }
     }catch(e){}
        }
      }, 500);	

  
  }
 
 myUI.chatOnPageLoad  = function() {
  logger.info("chatOnPageLoad", "starting...");
  lpChatBuildFrame(true);
 }
 
 myUI.registerOnMessage = function() {
  if (window.addEventListener){
   window.addEventListener("message", myUI.receiveChatPostMessage, false)
  } else {
   window.attachEvent("onmessage", myUI.receiveChatPostMessage)
  }

 }
 

 
 myUI.receiveChatPostMessage  = function(e) {logger.debug("in receive of bootstrapp file ");
  if (lpCWTagConst.DEBUG_ENABLE && isSameOrigin(e.origin)) {
   logger.debug("receiveChatPostMessageParent", e.data);
  }
  
  try{
   var msgData = JSON.parse(e.data);
    logger.debug("in bootstrap receiveChatPostMessageParent value::::", msgData.value);
  logger.debug("in bootstrap receiveChatPostMessageParent cmd::::", msgData.CMD);


  
	if(msgData.isSliderEnabled=='true'){
		if(!lenofromReload){
			if(msgData.type=="offer")
				lenoofferCount=lenoofferCount+1;
      else if(msgData.type=="locOffer")
				lenolocofferCount=lenolocofferCount+1; 
			else
				lenosecCount=lenosecCount+1;
		}
		/*Update logic to track LOC offer count*/
		if(msgData.offerId.indexOf("Q_")!=0){
     if(msgData.type=="offer"){ 
        sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "LENOOFFERCOUNT","value":lenosToken+"_"+lenoofferCount,"TYPE" : "OFFER"}); 
     }else{
        sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "LENOOFFERCOUNT","value":lenosToken+"_"+lenolocofferCount,"TYPE" : "LOCOFFER"}); 
     }
    }
		else
			sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "LENOSECCOUNT","value":lenosToken+"_"+lenosecCount});
		//console.log("msgData.offerName_msgData.offerId"+msgData.offerName+"_"+msgData.offerId);
		
		var elem = document.createElement('div');
		elem.innerHTML = msgData.offerName;
		tmpElem = elem.innerHTML;
		tmpElem = tmpElem.replace(/[^a-zA-Z0-9 ]/g, "")
		//console.log(tmpElem);
		/*Update logic to report LOC offer data to LP*/
		if(!lenofromReload){
      if(msgData.paperless == true){ //if the form is paperless delivery //US1446525
        sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DISP_PPRLSS_DLVRY_MSG"});		
      }else{ // if the form is offer or secured question //US1446525
        sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DISPLAY_SYSMSG","value":"Secured form has been received"});		
      }	
                  var rcOpenarray=[]; 
                  var ts1, ts2;
		    if(msgData.type=="offer"){	
				//lpSendData("session","RC_offer_name"+lenoofferCount,tmpElem+"_"+msgData.offerId);
				ts1 = 'RC_offer_sent'+lenoofferCount+'|'+'true';      
				ts2 = 'RC_offer_name'+lenoofferCount+'|'+tmpElem+'_'+msgData.offerId;        
				rcOpenarray.push(ts1);
				rcOpenarray.push(ts2);					
			}else if(msgData.type=="locOffer"){	
			//lpSendData("session","RC_offer_name"+lenoofferCount,tmpElem+"_"+msgData.offerId);				
				ts1 = 'RC_offer_LineIncrease_sent'+lenolocofferCount+'|'+'true';      
				ts2 = 'RC_offer_LineIncrease_name'+lenolocofferCount+'|'+tmpElem;        
				rcOpenarray.push(ts1);
				rcOpenarray.push(ts2);					
			}else{
				//lpSendData("session","Secure Question"+lenosecCount,tmpElem);
				ts1 = 'Secure Widget Sent'+lenosecCount+'|'+'true';
				ts2 = 'Secure Question'+lenosecCount+'|'+tmpElem;
				rcOpenarray.push(ts1);
				rcOpenarray.push(ts2);
                     }
                     
                  lpTag.sdes = lpTag.sdes||[];
        	     lpTag.sdes.push(
        			{
				        "type": "searchInfo",
				        "keywords": rcOpenarray
		              }
        		);     
		}

		
		setTimeout(function(){window.scroll(0,0)},10);
		lenofromReload=false;
		

	}	  
       if(msgData.isSliderDisabled=='true'){
		//console.log("RC_offer_status:"+msgData.offerStatus);
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOSESSION"});
		var rcClosearray=[];
		var ts1, ts2;
    /*Update logic to report LOC offer data to LP*/
		if(msgData.type=="offer"){
			//lpSendData("session","RC_offer_status"+lenoofferCount,msgData.offerStatus);
			ts1 = 'RC_offer_status'+lenoofferCount+'|'+msgData.offerStatus;  
            rcClosearray.push(ts1); 
		}else if(msgData.type=="locOffer"){
			//lpSendData("session","RC_offer_status"+lenoofferCount,msgData.offerStatus);
			ts1 = 'RC_offer_LineIncrease_status'+lenolocofferCount+'|'+msgData.offerStatus;  
            rcClosearray.push(ts1); 
		}else{
			//lpSendData("session","Secure Widget Status"+lenosecCount,msgData.offerStatus);
			ts1 = 'Secure Widget Status'+lenosecCount+'|'+msgData.offerStatus;
            rcClosearray.push(ts1); 
		}
		if(msgData.type=="offer" && typeof msgData.cardcount!="undefined"){			
		   //lpSendData("session","RC_offer_nameoncard"+lenoofferCount,msgData.nameoncard);
		   // ts2 = 'RC_offer_nameoncard'+lenoofferCount+'|'+msgData.nameoncard;
		    ts2 = 'RC_Offer_CardsAdded'+lenoofferCount+'|'+msgData.cardcount;
            rcClosearray.push(ts2);
		}
		lpTag.sdes = lpTag.sdes||[];
              lpTag.sdes.push(
	        {
       		 "type": "searchInfo",
		        "keywords": rcClosearray
         	 }
        	);
		document.getElementById("lnChatiFrame").style.height = '0px';
		document.getElementById("leno-ChatiFrameContainer").style.display="none";
			/*$( "#lnChatiFrame" ).animate({	
				height: "0px"
			}, 1, function() {
				document.getElementById("leno-ChatiFrameContainer").style.display="none";
			});*/	
           
		
		if(typeof msgData.ccpcancelled!="undefined" && msgData.ccpcancelled=="true" 
          && typeof msgData.paperless!="undefined" && msgData.paperless != true){ //US1446525
		 sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DISPLAYCCPMSG","type":msgData.type});
		}else if(typeof msgData.paperless!="undefined" && msgData.paperless == true){ //US1446525
		 sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DISP_CANCEL_MSG"});
		}else if(msgData.offerStatus == "cancelled"){
       sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DISP_CANCEL_MSG"});
    }
		isFirstSlider=true;
	}
	if(msgData.isLnChatFrameLoaded=='true'){
		//console.log("in set active cookie from isLnChatFrameLoaded sendMessage:"+sendMessage+" LNVALUEfromSession:"+LNVALUEfromSession);
		if(sendMessage){	
				//console.log('in set active cookie :'+LNVALUEfromSession)
				sendPostMessageToRCWidget({"LNCSFRMBOOTSTRAP": LNVALUEfromSession});
				sendMessage=false;
			}
	}
	if(msgData.LNCMSTATE=='true'){
		refreshAddLine();
		var RCWidgetStepNo = JSON.parse(msgData.value).stepNo;
		RCWidgetStepSize = msgData.size;
		document.getElementById("leno-ChatiFrameContainer").style.border = 'none';
            document.getElementById("leno-ChatiFrameContainer").style.width = '100%';
			if(JSON.parse(msgData.value).offerId.indexOf("Q_")==0  && RCWidgetStepNo==1){
				document.getElementById("leno-ChatiFrameContainer").style.height = '153px';
				document.getElementById("lnChatiFrame").style.height = '153px';
				document.getElementById("leno-ChatiFrameContainer").style.display = 'block';
			}	
			else{
				 if(JSON.parse(msgData.value).offerId.indexOf("Q_")!=0){
					//if(RCWidgetStepNo==4 || RCWidgetStepNo==6){
						if(RCWidgetStepSize > 232 && RCWidgetStepNo!==2){
							var lenoChatiFrameContainerHeight = checkVersionAndReturnHeight();
							document.getElementById("leno-ChatiFrameContainer").style.height = lenoChatiFrameContainerHeight+'px';					
						}else{
							document.getElementById("leno-ChatiFrameContainer").style.height = RCWidgetStepSize+'px';
						}
					/*}else {
						document.getElementById("leno-ChatiFrameContainer").style.height =  RCWidgetStepSize+'px';					
					}*/					
				 }
			}            
			if(isFirstSlider){
			document.getElementById("leno-ChatiFrameContainer").style.position = 'absolute';
            document.getElementById("leno-ChatiFrameContainer").style.marginLeft = '-11px';
            document.getElementById("leno-ChatiFrameContainer").style.borderRadius = '0';
            document.getElementById("leno-ChatiFrameContainer").style.boxShadow = 'none';
            document.getElementById("lnChatiFrame").style.width = '100%';
            document.getElementById("lnChatiFrame").style.height = '0px';
			document.getElementById("leno-ChatiFrameContainer").style.display = 'block';
				if(JSON.parse(msgData.value).offerId.indexOf("Q_")==0){
					//$("#lnChatiFrame").animate({height: "166px"},1); 
					document.getElementById("lnChatiFrame").style.height = '153px';
				}	
				else{
					
					//if(RCWidgetStepNo==4 || RCWidgetStepNo==6){
						if(RCWidgetStepSize > 232 && RCWidgetStepNo!==2){
							//$("#lnChatiFrame").animate({height: "232px"},1);
							var lnChatiFrameHeight = checkVersionAndReturnHeight();
							document.getElementById("lnChatiFrame").style.height = lnChatiFrameHeight+'px';							
						}else{
							//$("#lnChatiFrame").animate({height: RCWidgetStepSize+'px'},1); 
							document.getElementById("lnChatiFrame").style.height = RCWidgetStepSize+'px';
						}
					/*}else{
						$("#lnChatiFrame").animate({height: RCWidgetStepSize+'px'},1); 
					}*/
					//sendPostMessageToRCWidget({"lpEmbChatWiz": "LPNVCF", "CMD" : "RESENDHGT"})
				}

				//isFirstSlider=false;				
			}else{
				if(JSON.parse(msgData.value).offerId.indexOf("Q_")!=0){
				if(RCWidgetStepNo==1){
					document.getElementById("leno-ChatiFrameContainer").style.display = 'block';
				}
				//if(RCWidgetStepNo==4 || RCWidgetStepNo==6){
					if(RCWidgetStepSize > 232 && RCWidgetStepNo!==2){
							//$("#lnChatiFrame").animate({height: "232px"},1)				
							var lnChatiFrameHeight = checkVersionAndReturnHeight();							
							document.getElementById("lnChatiFrame").style.height = lnChatiFrameHeight+'px';
						}else{
							//$("#lnChatiFrame").animate({height: RCWidgetStepSize+'px'},1); 
							document.getElementById("lnChatiFrame").style.height = RCWidgetStepSize+'px';
						}
					/*}else{
						$("#lnChatiFrame").animate({height: RCWidgetStepSize+'px'},1); 
					}*/
			}
		}
		//console.log('in set active cookie received from LENO widget:'+msgData.value);
		//console.log("RCwidget size EXTENDSESSION:"+RCWidgetStepSize);
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "EXTENDSESSION","value":msgData.value,"size":RCWidgetStepSize}); 
		setTimeout(function(){ 
			if(isFirstSlider && (JSON.parse(msgData.value).stepNo == "1" || msgData.reload == "true")){
				if(JSON.parse(msgData.value).offerId.indexOf("Q_")!=0){
					sendPostMessageToRCWidget({"lpEmbChatWiz": "LPNVCF", "CMD" : "RESENDHGT", "stepNo":RCWidgetStepNo});
				}
				isFirstSlider=false;                                                          
			 }
		 }, 250);	
		//console.log('received from LENO widget:'+msgData.value);
	}
	if(msgData.RESENDHGT=='true'){
		var size=msgData.size; 	
		if(size > 232 && msgData.stepNo !== 2)
		{ 
			size = checkVersionAndReturnHeight();
		}
		document.getElementById("leno-ChatiFrameContainer").style.height = size+'px';
		document.getElementById("lnChatiFrame").style.height = size+'px';
		//$("#lnChatiFrame").animate({height: size+'px'},1);
		//console.log("RCwidget size RESENDHGT:"+size);
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "RESENDHGT","size":size});
    /*--US1635263 Widgets to be opened in minimized state--*/
    if(document.getElementById('lpChatTitleContainer').style.display == "none" && msgData.size <= 0){
      pollforheight = true;      
    }
	}
	if(msgData.RESENDHGT_ADDRESSCHECK=='true'){
		var size=msgData.size; 	
		document.getElementById("leno-ChatiFrameContainer").style.height = size+'px';
		document.getElementById("lnChatiFrame").style.height = size+'px';
		sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "RESENDHGT","size":size});
	}
	if(msgData.LNSTATUS=='true'){
		if(msgData.type=="offer"){
			//lpSendData("session","RC_offer_status"+lenoofferCount,msgData.offerStatus);
		}else{
			//lpSendData("session","Secure Widget Status"+lenosecCount,msgData.offerStatus);
             }
		if(msgData.nameoncard!=""){
		    //lpSendData("session","RC_offer_nameoncard"+lenoofferCount,msgData.nameoncard);
              }   
		//console.log('received from LENO widget:'+msgData.value);
	}
	if(msgData.openinterstitial=='true'){
		if(window.location.href.indexOf("accountprofile/us/view.do")!=-1){
        var xcutData = getCrossCutData();
        MycaAssist.interstitial.paperless.display(xcutData);  		
		}else{
			setCookie('lp_ppl', "true", null, 10);
			//window.location="https://e2qonline.americanexpress.com/myca/accountprofile/us/view.do?request_type=authreg_home&source=inav&sorted_index=0&inav=MYCA_DUAL_Profile";
      sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "DISP_THNKU_MSG"}); //US1446525
      setTimeout(function(){ //US1446525
window.location="https://online.americanexpress.com/myca/accountprofile/us/view.do?request_type=authreg_sdo&linknav=US-Ser-axpAccountManagement-PaperlessSettings&action=stmtopt&Face=en_US&sorted_index=0";
      },2000);
		}
	}
	
   if(msgData.lpEmbChatWiz == "LPNVPF"){
     logger.debug("receiveChatPostMessageParent::::", msgData.lpEmbChatWiz);
	 
   if(msgData.CMD == "GETSTOKENQUERY"){
	   sTokenRes = msgData.value;
   }
	 
  if(msgData.CMD == "UIDESIGN"){
  logger.debug("in bootstrap receiveChatPostMessageParent cmd inside UIDESIGN::::",msgData.CMD);
   if(msgData.value == 'FROMRESTABLISH'){
	   //console.log('bootstrap parent page:'+window.location.href);
	   if(window.location.href.indexOf("ssearch.jsp")>-1){
			IOA.globalRule.sendAddlineTrigger=true;
		}
		if (typeof timeoutWidget!= "undefined") {
			IOA.globalRule.sendAddlineTrigger=true;
		}	
		if(window.location.href.indexOf("travel")>-1 || window.location.href.indexOf("iseatz.com")>-1){
			IOA.globalRule.sendAddlineTrigger=true;
		}
	if(window.location.href.indexOf("e1qglobal2.americanexpress.com")>-1){
		window.IOA = {};
		IOA.globalRule = {sendAddlineTrigger: true}
	}
	var xcutforrestablish;
	var xcutvid;
	var xcutctype;
	var bbCookie = getCookie_AA('blueboxpublic');	
	if(typeof lpTag!=="undefined" && typeof lpTag.taglets!=="undefined"){
		 xcutvid =  lpTag.taglets.lp_monitoringSDK.getVid();
	  }
	  if(typeof lpTag!=="undefined" && typeof lpTag.sdes!=="undefined"&& typeof lpTag.sdes.get("ctmrinfo")!=="undefined"){
		  xcutctype = lpTag.sdes.get("ctmrinfo")[0].info.ctype;
	  }
	  
	  xcutforrestablish = getCrossCutData();
	if(document.getElementById("oceLayer")!=null)
		firsttimelogin ="true";
	if(typeof lpTag != "undefined" && typeof lpTag.exp_value != "undefined" && lpTag.exp_value!="")
			expansionFlag = lpTag.exp_value;
       sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "TORESTABLISH", "value" : window.location.href,"sendAddlineTrigger":IOA.globalRule.sendAddlineTrigger,"xcutobj":xcutforrestablish,"lpexpansion":expansionFlag,"sidvid":xcutvid,"cType":xcutctype,"firsttimelogin":firsttimelogin,"bbCookie":bbCookie});  
  }
  if(msgData.value == 'FORXCUTRELOAD'){
	   var xcutforrestablish;
	   var xcutvid;
		var xcutctype;
		var bbCookie = getCookie_AA('blueboxpublic');	
	if(document.getElementById("oceLayer")!=null)
		firsttimelogin ="true";
	try{
	if(typeof lpTag!=="undefined" && typeof lpTag.taglets!=="undefined"){
		 xcutvid =  lpTag.taglets.lp_monitoringSDK.getVid();
	  }
	}catch(e){
		xcutvid = "";
	}  
	
	try{
	  if(typeof lpTag!=="undefined" && typeof lpTag.sdes!=="undefined"&& typeof lpTag.sdes.get("ctmrinfo")!=="undefined"){
		  xcutctype = lpTag.sdes.get("ctmrinfo")[0].info.ctype;
	  }
	}catch(e){
		xcutctype="";
	}   
      xcutforrestablish = getCrossCutData();
	  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "TOXCUTRELOAD","xcutobj":xcutforrestablish,"sidvid":xcutvid,"cType":xcutctype,"firsttimelogin":firsttimelogin,"bbCookie":bbCookie });
   }
   if(msgData.value == 'HIDECLOSEBTN'){
    logger.debug("in bootstrap receiveChatPostMessageParent cmd inside HIDECLSOE::::",msgData.value);
   //lpRemoveCloseIcon();
  }
 if(msgData.value == 'SHOWCLOSEBTN'){
  logger.debug("in bootstrap receiveChatPostMessageParent cmd inside SHOWCLSOE::::",msgData.value);
  //lpShowCloseIcon();
 }
 if(msgData.value == 'TABONCLOSEBTN'){
  logger.debug("in bootstrap receiveChatPostMessageParent cmd inside TABONCLOSEBTN::::",msgData.value);
  document.getElementById("lpChatMinizeBtn").focus();
  /*if(document.activeElement.id === "lpChatMinizeBtn"){ //US1505870 - Tabbing issues
	document.getElementById("lpChatMinizeBtn").style.outline = "2px solid #265AB1";
  }else{
	document.getElementById("lpChatMinizeBtn").style.outline = "none";  
  }*/
}
if(msgData.value == 'ADDLINES'){
	refreshAddLine();
    if(msgData.msgCount != undefined && msgData.msgCount != null){
        if(!chatMaximize){
            document.getElementById('showMsgCount').innerHTML = msgData.msgCount;
			/** US1922574: SIT_RWD_Minimize the Chat window when the user navigates or with chat_MOBILE Only */
			if (msgData.msgCount > 0) {
            	document.getElementById('showMsgCount').style.display = 'block';
        	}else{
            	document.getElementById('showMsgCount').style.display = 'none';
        	}
        }else{
            document.getElementById('showMsgCount').style.display = 'none';
        }
    }
}
if(msgData.value == 'CCPUNAVAILABLE'){
	lpSendData("session","EWError","ccpunavailable"+msgData.ckValue);
	//console.log("sent ccpunavailable message to LP ");
	lpSendData("session","EWError",msgData.chatObj);
	//console.log("sent ccpunavailable chat object to LP ");
	lpSendData("session","EWError",msgData.context);
}
if(msgData.value == 'CANTCONNECT'){
	lpSendData("session","EWError","cantconnect"+msgData.ckValue);
	//console.log("sent cantconnect message to LP ");
	lpSendData("session","EWError",msgData.chatObj);
	//console.log("sent cantconnect chat object to LP ");
	lpSendData("session","EWError",msgData.context);
}

if(msgData.value == 'SURVEY'){
	lpSendData("session","EWError","Survey"+msgData.ckValue);
	//console.log("sent cantconnect message to LP ");
}
if(msgData.value == 'TIMESTAMP'){
	lpSendData("session","EWInfo","Timestamp "+msgData.ckValue);
	//console.log("sent cantconnect message to LP ");
}

}
  
    if(msgData.CMD == "FLASHING"){
     logger.debug("receiveChatPostMessageParent::::", msgData.CMD);
     if(msgData.value == 'START'){
      logger.debug("receiveChatPostMessageParent::::", msgData.value);
      flashingStart();
     }/*else{
      logger.debug("Flashing Stop::::", msgData.value);
      flashingStop();
      logger.debug("Flashing Stop::::", "stop");
     }*/
    }else if(msgData.CMD == "REFRESH"){
		//console.log("parent page refresh"+msgData.value);
		window.parent.location.href=msgData.value;
     }else if(msgData.CMD == "CONTROL"){
	 if(msgData.value == 'SETLPPARAMS3'){
		 setlpchatActiveCookie1('lpupdate',msgData.lpupdate);
	 }else if(msgData.value == 'FOCUS_CLOSE_BUTTON'){
		 document.getElementById("lpChatEndChatBtn").focus();
		//document.getElementById("lpChatEndChatBtn").style.outline = "2px solid #265AB1"; //US1505870 - Tabbing issues
	 }else if(msgData.value == 'SHOW_CONTAINER'){
	 /* if(msgData.chatwindowstatus=="true"){
           var windowStatusarray=[]; 
	    var ws1 = 'chatWindowOpen|true';
	    windowStatusarray.push(ws1);

	    lpTag.sdes = lpTag.sdes||[];
	    lpTag.sdes.push(
          {
			"type": "searchInfo",
			"keywords": windowStatusarray
	   } 
         );
	 }*/
      if(window.location.href.indexOf("chat-intlink") > -1){
        showChatWizContainerVisibility(true,"minimize");
      }else{
        showChatWizContainerVisibility(true);
      }
	   undockButtonHandler();
   //lpShowCloseIcon();
	} else if (msgData.value === 'MINIMIZE_CONTAINER') {
		/** Minimize the chat window */
		if (msgData.minimizeChatWindow === "true" && device.mobile()) {
			showChatWizContainerVisibility(true, "minimize");
		}
     }else if(msgData.value == 'DISP_END_CHAT_LAYER'){
       if(document.getElementById('lpChatTitleContainerMin').style.display == 'block'){
         document.getElementById("mainpageoverlay").style.display = "none";
         document.getElementById("mainpageprompt").style.display = "none";
         confirmDispalyFlag = true;
       }else{
        document.getElementById("mainpageoverlay").style.display="block";
        document.getElementById("mainpageprompt").style.display="block";
        document.getElementById("confirmButton").focus();
       }
		 /*$("#mainpageoverlay").show();
		 $("#mainpageprompt").show();
		 $("#confirmButton").focus();*/
	 }else if(msgData.value == 'HIDE_END_CHAT_LAYER'){
		  document.getElementById("mainpageoverlay").style.display="none";
			 document.getElementById("mainpageprompt").style.display="none";
		// $("#mainpageoverlay").hide();
		// $("#mainpageprompt").hide();
	 }else if(msgData.value == 'CLOSE_ENDCHAT_OVERLAY'){
		     confirmClicked=false;
		 	 document.getElementById("coBrowseWrapper").style.display = 'none';
		document.getElementById("coBrowseWrapper").className = 'cobClose';	
	 }else if(msgData.value == 'END_CHAT'){
	  chatlastrefreshtime = 0;	 
      endChat();
	/*  var windowStatusarray=[]; 
       var ws1 = 'chatWindowOpen|false';
        windowStatusarray.push(ws1);

       lpTag.sdes = lpTag.sdes||[];
       lpTag.sdes.push(
           {
		"type": "searchInfo",
		"keywords": windowStatusarray
	   }
        ); */
	//  lpSendData("session","chatWindowOpen","false");
	if(document.getElementById("leno-ChatiFrameContainer")!=null){
       document.getElementById("leno-ChatiFrameContainer").remove();
	} 
     }else if(msgData.value == 'COBROWSE_INVITE'){
		cob_sId = msgData.serviceId;
		cob_aId=msgData.agentId;
		var aName=msgData.cmName;
    globalFirstName = aName;
    setlpchatActiveCookie2("glbCnm",globalFirstName);
	
		lpTag.events.publish("lpCoBrowse", "cobrowseOffered", {
		serviceId: cob_sId,
		agentId: cob_aId,
		visitorName: aName,
		ssid: getCookie_AA('lesessionId'),
		svid: getCookie_AA('levisitorId')	
		}
		);
		    document.getElementById("coBrowseWrapper").className = 'cobOpen';
			document.getElementById("coBrowseWrapper").style.position = 'absolute';
            document.getElementById("coBrowseWrapper").style.borderRadius = '0';
            document.getElementById("coBrowseWrapper").style.boxShadow = 'none';
			document.getElementById("coBrowseWrapper").style.display = 'block';
			document.getElementById("coBrowseWrapper").style.height = '153px';
			document.getElementById("coBrowseWrapper").style.width = '100%';
			document.getElementById("coBrowseWrapper").style.zIndex = '100';
      /*Hide the cobrowse invite when window is closed*/
      if(document.getElementById("lpChatTitleContainer").style.display == "none"){
        document.getElementById("coBrowseWrapper").style.display = 'none';
      }
			
			var lnInfo = '{"offerId":"Q_Cobrowse"}';
			sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "EXTENDSESSION","value":lnInfo,"size":153}); 
     
     }else if(msgData.value == 'COBROWSE_CANCEL'){
      
	  document.getElementById("coBrowseWrapper").style.display = 'none';
	  sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOSESSION"});		   
	  
     }else if(msgData.value == 'COBROWSE_ACCEPT'){
      var sId = msgData.serviceId;
	  var aId=msgData.agentId;
	  var aName="";
	  var xcutobj = getCrossCutData();	  
		try{
		aName = getDataFromCrossCut(xcutobj, xcutType, 'embossedName');
		}catch(ex){}
	
      lpTag.events.publish("lpCoBrowse", "cobrowseAccepted", {
		serviceId: sId,
		agentId: aId,
		visitorName: aName,
		ssid: getCookie_AA('lesessionId'),
		svid: getCookie_AA('levisitorId')
		}
		);
     }else if(msgData.value == 'HIDE_CONTAINER'){
      showChatWizContainerVisibility(false);
     }else if(msgData.value == 'CHAT_STATE_ACTIVE'){
      isChatActive = true;      
     }else if(msgData.value == 'CHAT_STATE_INACTIVE'){
      isChatActive = false;     
	  deletelpchatActiveCookie();	
     }else if(msgData.value == 'UPDATE_DRAG_AREA_SHOW_PCI'){
      adjustWindowSizeForPCI();
      isPciVisible = true;
     }else if(msgData.value == 'UPDATE_DRAG_AREA_HIDE_PCI'){
      adjustWindowSizeNonePCI();
      isPciVisible = false;
   // logger.debug("in bootstrap receiveChatPostMessageParent cmd inside UPDATE_DRAG_AREA_HIDE_PCI::::",msgData.value);
   //lpShowCloseIcon();
     }else if(msgData.value == 'SET_PRECHATACTIVECOOKIE'){
		setlpchatActiveCookie();
     }else if(msgData.value == 'SET_ACTIVECOOKIE'){
		setlpchatActiveCookie();
		if(msgData.MSGTIMER){
			isTimerStopped=false;
			if(timeoutInterval!=null){
				clearInterval(timeoutInterval); 
				timeoutInterval=null;
		    }
			refreshTillTimeout(msgData.REFCTR);
		}	
			var reloadstr;
			if(msgData.LNVALUE==undefined){
				reloadstr = "&reload=false";			
			}else{
				reloadstr = "&reload=true";
				lenofromReload=true;
			}
			if(window.location.href.indexOf("lpsidvar")!=-1){
				if(window.lpMTagConfig!=undefined && window.lpMTagConfig.LPSID_VAR!= undefined && window.lpMTagConfig.LPSID_VAR!=""){
					//console.log("LENO SHOW AND TELL window.lpMTagConfig.LPSID_VAR:"+window.lpMTagConfig.LPSID_VAR);
					lnChatBuildFrame(window.lpMTagConfig.LPSID_VAR,reloadstr);
				}
			}else{			
				/*if(window.lpSID!=undefined && window.lpSID!=""){
					console.log("LENO SHOW AND TELL window.lpSID:"+window.lpSID);	
					lnChatBuildFrame(window.lpSID,reloadstr);
				}else{
					console.log("LENO SHOW AND TELL msgData.LPSUID:"+msgData.LPSUID);
					lnChatBuildFrame(msgData.LPSUID,reloadstr);
				}*/
				if(lenosToken==""){
					lenosToken = getCookie_AA('lpToken');
				}
				sendMessage=false;
				if(lenosToken!=""){
					//lenosToken=lenosToken.substring(0, 45);
					//console.log("LENO SHOW AND TELL STOKEN(80 chars):"+lenosToken);	
					if(document.getElementById("leno-ChatiFrameContainer")==null){
						lnChatBuildFrame(lenosToken,reloadstr);	
						sendMessage=true;
				    }		
					setlpchatActiveCookie2("lpToken",lenosToken);
				}
			}
      /*Update logic to get the counts from session*/
			lenoofferCount=msgData.LNOFFERCNT;
			lenosecCount=msgData.LNSECCNT;
      lenolocofferCount=msgData.LNLOCOFFERCNT;
			if(lenoofferCount!=0 || lenolocofferCount!=0){
        var validCount;
        if(lenoofferCount!=0){
          validCount = lenoofferCount;
        }else{
          validCount = lenolocofferCount;
        }        
				if(lenosToken==validCount.split("_")[0]){
          if(lenoofferCount!=0){
            lenoofferCount=parseInt(lenoofferCount.split("_")[1]);
          }
          if(lenolocofferCount!=0){
            lenolocofferCount=parseInt(lenolocofferCount.split("_")[1]);
          }
				}else{
					sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOOFFERCOUNT","value":""}); 
					lenoofferCount=0;
          lenolocofferCount=0;
				}	
			}
			
			if(lenosecCount!=0){
				if(lenosToken==lenosecCount.split("_")[0]){
					lenosecCount=parseInt(lenosecCount.split("_")[1]);
				}else{
					sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOSECCOUNT","value":""}); 
					lenosecCount=0;
				}	
			}
			
			suid=msgData.LPSUID;
			if(msgData.LNVALUE!=undefined){
				LNVALUEfromSession = msgData.LNVALUE;
				/*setTimeout(function(){
				if(sendMessage){
									console.log("in set active cookie 4:");
				sendPostMessageToRCWidget({"LNCSFRMBOOTSTRAP": msgData.LNVALUE});
				sendMessage=false;
				}
				}, 5000);*/				
			}
		
     }else if(msgData.value == 'SET_MARVINACTIVECOOKIE'){
		setmarvinchatActiveCookie();
		if(msgData.MSGTIMER){
			refreshTillTimeout(msgData.REFCTR);				
		}
	/*		var reloadstr;
			if(msgData.LNVALUE==undefined){
				reloadstr = "&reload=false";			
			}else{
				reloadstr = "&reload=true";
				lenofromReload=true;
			}	
			if(window.lpSID!=undefined && window.lpSID!=""){	
				lnChatBuildFrame(window.lpSID,reloadstr);
				//lnChatBuildFrame(msgData.LPSUID,reloadstr);
			}else{
				lnChatBuildFrame(msgData.LPSUID,reloadstr);
			}
			if(lenosToken==""){
					lenosToken = getCookie_AA('lpToken');
				}
				sendMessage=false;
				if(lenosToken!=""){
					//lenosToken=lenosToken.substring(0, 45);
					//console.log("LENO SHOW AND TELL STOKEN(80 chars):"+lenosToken);	
					if(document.getElementById("leno-ChatiFrameContainer")==null){
						lnChatBuildFrame(lenosToken,reloadstr);		
						sendMessage=true;			
					}	
					setlpchatActiveCookie2("lpToken",lenosToken);
				}

			lenoofferCount=msgData.LNOFFERCNT;
			lenosecCount=msgData.LNSECCNT;
      lenolocofferCount=msgData.LNLOCOFFERCNT;
			if(lenoofferCount!=0 || lenolocofferCount!=0){
        var validCount;
        if(lenoofferCount!=0){
          validCount = lenoofferCount;
        }else{
          validCount = lenolocofferCount;
        }        
				if(lenosToken==validCount.split("_")[0]){
          if(lenoofferCount!=0){
            lenoofferCount=parseInt(lenoofferCount.split("_")[1]);
          }
          if(lenolocofferCount!=0){
            lenolocofferCount=parseInt(lenolocofferCount.split("_")[1]);
          }
				}else{
					sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOOFFERCOUNT","value":""}); 
					lenoofferCount=0;
          lenolocofferCount=0;
				}	
			}
			
			if(lenosecCount!=0){
				if(lenosToken==lenosecCount.split("_")[0]){
					lenosecCount=parseInt(lenosecCount.split("_")[1]);
				}else{
					sendPostMessage({"lpEmbChatWiz": "LPNVCF", "CMD" : "REMOVELENOSECCOUNT","value":""}); 
					lenosecCount=0;
				}	
			}
			
			if(msgData.LNVALUE!=undefined){
				LNVALUEfromSession = msgData.LNVALUE;
				setTimeout(function(){
				if(sendMessage){	
				console.log("in set active cookie 4:");
					sendPostMessageToRCWidget({"LNCSFRMBOOTSTRAP": msgData.LNVALUE});
					sendMessage=false;
				}
				}, 5000);			
			} */
     }else if(msgData.value == 'SET_RFRSHWAIT'){
			refreshTillTimeout(msgData.REFCTR);				
     }else if(msgData.value == 'SETLPPARAMS1'){
		 setlpchatActiveCookie1('lpdata',msgData.cValue);
	 }else if(msgData.value == 'SETLPPARAMS2'){
		 setlpchatActiveCookie1('vid',msgData.vID);
	 }else if(msgData.value == 'LPCDATA'){
		
 	
		 deletelpchatActiveCookie1('lpchat_active');
		 deletelpchatActiveCookie1('smschat_active');
		deletelpchatActiveCookie1('marvinchat_active');
		 deletelpchatActiveCookie1('lpdata');
		 deletelpchatActiveCookie1('vid');
		 deletelpchatActiveCookie1('lpcoredata');
		  deletelpchatActiveCookie1('setatbbv');
		   deletelpchatActiveCookie1('setatesc');
		    deletelpchatActiveCookie1('setatcnvsid');
			 deletelpchatActiveCookie1('lpToken');
			deletelpchatActiveCookie1('jwtVal');
			
			deletelpchatActiveCookie1('levisitorId');
			deletelpchatActiveCookie1('lesessionId');
			deletelpchatActiveCookie1('leinteractionContextId');
			deletelpchatActiveCookie1('lecid');
			deletelpchatActiveCookie1('leeid');
			deletelpchatActiveCookie1('lelastAgent');
			deletelpchatActiveCookie1('lpstate');
			deletelpchatActiveCookie1('lepriority');
      delCookie("glbCnm");

		 if(timeoutInterval!=null){
				clearInterval(timeoutInterval); 
				timeoutInterval=null;
		 }
		 if(sessionIntervalID!=null){
			clearInterval(sessionIntervalID);
			sessionIntervalID=null;
		 }
		 chatlasttimeout=true;
		
		/*$("#leno-ChatiFrameContainer").animate({left: 11}, 1500,function(){
			$("#leno-ChatiFrameContainer").css("display","none");			
		});*/
		/*document.getElementById("leno-ChatiFrameContainer").className="go-right";
		setTimeout(function(){ 
		  if(document.getElementById("leno-ChatiFrameContainer")!=null)
			document.getElementById("leno-ChatiFrameContainer").style.display="none";
		}, 1600);*/
		
			
		if(document.getElementById("leno-ChatiFrameContainer")!=null){
			sendPostMessageToRCWidget({"lpEmbChatWiz": "LPNVCF", "CMD" : "LENO_CLOSEWIDGET"});
			document.getElementById("lnChatiFrame").style.height = '0px';
		document.getElementById("leno-ChatiFrameContainer").style.display="none";			
		  setTimeout(function(){if(document.getElementById("leno-ChatiFrameContainer")!=null){document.getElementById("leno-ChatiFrameContainer").remove();}},3000);
	 }
		
		/*$( "#lnChatiFrame" ).animate({	
				height: "0px"
			}, 1, function() {
				document.getElementById("leno-ChatiFrameContainer").style.display="none";
			});*/
		isFirstSlider=true;
	 }else if(msgData.value == 'SET_RECMONITOR'){
		 setlpchatActiveCookie1('lprecmon',msgData.ckValue);
	 }else if(msgData.value == 'SET_LESTATE'){
		 setlpchatActiveCookie1('lpstate',msgData.ckValue);
	 }else if(msgData.value == 'SET_LPCOOKIE'){
		 setlpchatActiveCookie1('lpcoredata',msgData.ckValue);
	 }else if(msgData.value == 'SET_ATBBV'){
		 setlpchatActiveCookie1('setatbbv',msgData.cValue);
	 }else if(msgData.value == 'SET_ATCHTESC'){
		 setlpchatActiveCookie1('setatesc',msgData.ckValue);
	 }else if(msgData.value == 'SET_ATCNVSID'){
		 setlpchatActiveCookie1('setatcnvsid',msgData.ckValue);
	 }else if(msgData.value == 'IN_PRECHAT_SCREEN'){
		 lpSendData("session","chatWindowOpen","true");
	 }else if(msgData.value == 'SET_JWTCOOKIE'){
		 setlpchatActiveCookie1('jwtVal',msgData.ckValue);
	 }else if(msgData.value == 'SET_lastAgent'){
		 setlpchatActiveCookie1('lelastAgent',msgData.ckValue);
	 }else if(msgData.value == 'SET_LEPRIORITY'){
		 setlpchatActiveCookie1('lepriority',msgData.ckValue);
	 }else if(msgData.value == 'LE_END_CHAT'){
          /*var questionSet1 = "es_myca_q1|Overall, how would you rate the service you received during this contact with American Express? |"+msgData.ans1;
        var questionSet2 = "es_myca_q2|Was the agent able to help you complete your transaction or address your inquiry?|"+msgData.ans2;*/
		try {
			var keywordsarray = [];
			var sObj = msgData.ans1;
			for(var i=0; i < sObj.length; i++) {
				var ts = 'es_myca_q'+(i+1)+'|'+sObj[i].question+'|'+sObj[i].answer;
				keywordsarray.push(ts);
			} 

			lpTag.sdes = lpTag.sdes || [];
			lpTag.sdes.push(
				{
					"type": "searchInfo",
					"keywords": keywordsarray
				}
			);
			if (typeof lpTag.sdes.send !== "undefined") {
				// added the below line for immediate reflection at LE side for post chat survey
				lpTag.sdes.send();
				lpTag.sdes.send(
					{
						"type": "mrktInfo",
						"info": {
							"campaignId": "Survey SDEs Sent"
						}
					}
				);
			} else {
				invokeUILog(msgData.convID, "WARN", "blueboxpublic: " + getCookie_AA('blueboxpublic') + " - lpTag.sdes.send method is undefined.");
			}
			invokeUILog(msgData.convID, "INFO", "blueboxpublic: " + getCookie_AA('blueboxpublic') + " - Survey data posted to LP.");
			if(smsForChat) {
				closeButtonClicked();
			}
		} catch(e) {
			//console.log("=> LP - Survey error: " + e);
			invokeUILog(msgData.convID, "ERROR", "blueboxpublic: " + getCookie_AA('blueboxpublic') + " - Error while sending survey data to LP.");
			invokeUILog(msgData.convID, "ERROR", "blueboxpublic: " + getCookie_AA('blueboxpublic') + " - Error details: " + e.message);
		}
		chatlastrefreshtime = 0;
	/*  var windowStatusarray=[]; 
       var ws1 = 'chatWindowOpen|false';
        windowStatusarray.push(ws1);

       lpTag.sdes = lpTag.sdes||[];
       lpTag.sdes.push(
           {
		"type": "searchInfo",
		"keywords": windowStatusarray
	   }
        );	*/
         //endChat();	
       document.getElementById("leno-ChatiFrameContainer").remove();
     }
    }
   }
  }catch (excp) { 
   logger.debug("lpReceiveChatPostMessage. Exception occurred", excp);
  }
  
  return;
 }
 
 // mouse hover tool-tip div
 function showMouseOverToolTip(elementId) {
  try{ 
  logger.debug("showMouseOverToolTip", "id ="+elementId);
  
  removeMouseOverToolTip();
  var buttonObj = getElement(elementId);
  var toolTipTopSpaceRequired = buttonObj.offsetHeight - 12;
  var chatWizContainerOffset = getOffset(chatWizContainer);
  
  logger.debug("showMouseOverToolTip", "container top ="+ getOffset(chatWizContainer).top + " , button height="+toolTipTopSpaceRequired);
  var tooltipDiv;
  if(chatWizContainerOffset.top >= toolTipTopSpaceRequired){
   tooltipDiv = makeHoverDiv(buttonObj.getAttribute("data-msg"), false);
  }else{
   tooltipDiv = makeHoverDiv(buttonObj.getAttribute("data-msg"), true);
  }
  chatWizContainer.appendChild(tooltipDiv);
  
  var tooltipDiv = getElement("lpToolTipContent");
  if(elementId=="lpChatPopOutBtn"){
   tooltipDiv.style.right = "22px";
  }else if(elementId=="lpChatMinizeBtn"){
   tooltipDiv.style.right = "2px";
  }else if(elementId=="lpChatEndChatBtn"){
   tooltipDiv.style.right = "-19px";
  }else if(elementId=="lpChatMaximizeBtn"){
	  if(chatWizContainer.className.indexOf("lp_US") > -1){
   if(chatWizContainer.className == "lp_US lpDraggable"){
   		tooltipDiv.style.right = "-20px"; //-20px
		if(getCookie_AA1('lpPopulation') == "AUTOMATION"){
			tooltipDiv.style.right = "-9px"; 
		}
   		tooltipDiv.style.top = "-22px";
  	}else{
		tooltipDiv.style.right = "2px";//12px
		if(getCookie_AA1('lpPopulation') == "AUTOMATION"){
			tooltipDiv.style.right = "12px"; 
		}
   		tooltipDiv.style.top = "-22px";  		
  	}
	  }
	  if(chatWizContainer.className.indexOf("lp_ca_en") > -1){
	if(chatWizContainer.className == "lp_ca_en lpDraggable"){
   		tooltipDiv.style.right = "-5px";
   		tooltipDiv.style.top = "-22px";
  	}else{
		tooltipDiv.style.right = "14px";
   		tooltipDiv.style.top = "-22px";  		
  	}
	  }
  }else if(elementId=="lpChatEndChatBtnMin"){
	  if(chatWizContainer.className.indexOf("lp_US") > -1){
   if(chatWizContainer.className == "lp_US lpDraggable"){
	    tooltipDiv.style.right = "-40px";//-40px
		if(getCookie_AA1('lpPopulation') == "AUTOMATION"){
			tooltipDiv.style.right = "-30px"; 
		}
   		tooltipDiv.style.top = "-22px";
  	}else{
		tooltipDiv.style.right = "-19px";
		if(getCookie_AA1('lpPopulation') == "AUTOMATION"){
			tooltipDiv.style.right = "-8px"; 
		}
   		tooltipDiv.style.top = "-22px";
  	}
	  }
	  if(chatWizContainer.className.indexOf("lp_ca_en") > -1){
	if(chatWizContainer.className == "lp_ca_en lpDraggable"){
	    tooltipDiv.style.right = "-26px";
   		tooltipDiv.style.top = "-22px";
  	}else{
		tooltipDiv.style.right = "-10px";
   		tooltipDiv.style.top = "-22px";
  	}
	  }
  }  
  }catch(e){}
 }
 
 function dockButtonHandler(){
  logger.debug("dockButtonHandler", "");
  
  //isDock = true;
  
  //var chatIconPopOutImg = getElement("lpChatPopOutBtnImg");
  //var newClasses = deleteAppendStyleClass(chatIconPopOutImg, "lpCustChatIconPopIn", "lpCustChatIconPopOut");
  //chatIconPopOutImg.className = newClasses;
  
  //var chatIconPopOut = getElement("lpChatPopOutBtn");
  //chatIconPopOut.setAttribute("data-msg", lpCWTagConst.lpChatTitleUndock);
  
  chatWizContainer.style.bottom = "0px";
  chatWizContainer.style.right = "0px";
  chatWizContainer.style.left = "auto";
  chatWizContainer.style.top = "auto";
  
  if(typeof dragManager != "undefined"){
   dragManager.unbind( draManagerSession );
  }
 }
 
 function undockButtonHandler(){
  logger.debug("undockButtonHandler", "222");
  isDock = false;
  
  //var chatIconPopOutImg = getElement("lpChatPopOutBtnImg");
  //var newClasses = deleteAppendStyleClass(chatIconPopOutImg, "lpCustChatIconPopOut", "lpCustChatIconPopIn");
  //chatIconPopOutImg.className = newClasses;
  
  //var chatIconPopOut = getElement("lpChatPopOutBtn");
  //chatIconPopOut.setAttribute("data-msg", lpCWTagConst.lpChatTitleDock);   
  
  dragManager = lpTag.taglets.lpDragManager();
  var titleDragArea = getElement( 'lpChatTitleContainer' );
  var dmParam = {
      drag: chatWizContainer,   //The element to drag
      anchor: titleDragArea,   //The drag anchor chatiFrameContainer, chatWizContainer
      horizontal: true,      //Allow horizontal drag
      vertical: true,       //Allow vertical drag
      onDrag: function (data) {  //Callback when starting
	     document.getElementById("lpChatWizContainer").className = "lp_"+Bootstrapper.ensMarket+" lpDraggable";
         logger.debug("Drag Start",  "...");
       },
      onDragEnd: function (data) {//callback when ended
        logger.debug("Drag Complete",  data);
		setTopOffPositionValue = data.top; 
		 setLeftOffPositionValue = data.left; 
		if(document.getElementById("leno-ChatiFrameContainer").style.display == "block"){
		 if(data.left < 270){
			setLeftOffPositionValue = 270;
            document.getElementById("lpChatWizContainer").style.left = setLeftOffPositionValue + "px"
        }
	    else
	       setLeftOffPositionValue = data.left; 
       }
       }
   };
  draManagerSession = dragManager.bind(dmParam); 
    
 }
 function dockUnDockButtonClick(e){
  logger.debug("dockUnDockButtonClick", "...");
  
  /*if(isDock){
   undockButtonHandler();
  }else{
   dockButtonHandler();
  }*/
  undockButtonHandler();
  
 }
 
 //function to show grab pointer
  function showGrabPointer(){
var lpChatTitleDragAreaID = document.getElementById("lpChatTitleDragArea");
lpChatTitleDragAreaID.className = "lpLeft grab";
 }
 
 //function to hide grab pointer
 function hideGrabPointer(){
var lpChatTitleDragAreaID = document.getElementById("lpChatTitleDragArea");
lpChatTitleDragAreaID.className = "lpLeft";
 }


 myUI.bindEvents = function() {
  logger.debug("bindEvents", "...");
  
  /*if(lpCWTagConst.enableDockUnDock){
   //bindEvent(getElement("lpChatPopOutBtn"), "click", dockUnDockButtonClick);
   bindEvent(getElement("lpChatPopOutBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatPopOutBtn") } );
   bindEvent(getElement("lpChatPopOutBtn"), "mouseout", removeMouseOverToolTip);
  }*/
  //bindEvent(getElement("lpChatTitleContainer"), "click", dockUnDockButtonClick);
  bindEvent(getElement("lpChatMinizeBtn"), "click", showMinimizeHandler);
  bindEvent(getElement("lpChatMinizeBtn"), "keydown", function(){showMinimizeHandlerforEnterKey(event);}); 
  bindEvent(getElement("lpChatMaximizeBtn"), "keydown", function(){showMaximizeHandlerforEnterKey(event);});
  bindEvent(getElement("lpChatTitleDragAreaMin"), "click", function(){showMaximizeHandler(false)});
  bindEvent(getElement("lpChatEndChatBtn"), "click", closeButtonClicked); 
  bindEvent(getElement("lpChatEndChatBtn"), "keydown", function(){closeButtonClickedforEnterkey(event);}); 
  bindEvent(getElement("lpChatEndChatBtnMin"), "click", closeButtonClickedForMin); 
  bindEvent(getElement("lpChatEndChatBtnMin"), "keydown", function(){closeButtonClickedForMinforEnterkey(event);});
  
  bindEvent(getElement("lpChatMinizeBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatMinizeBtn") } );
  bindEvent(getElement("lpChatMaximizeBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatMaximizeBtn") } );
  bindEvent(getElement("lpChatEndChatBtn"), "mouseover", function(){ showMouseOverToolTip("lpChatEndChatBtn") }); 
  bindEvent(getElement("lpChatEndChatBtnMin"), "mouseover", function(){ showMouseOverToolTip("lpChatEndChatBtnMin") }); 
  
  bindEvent(getElement("lpChatMinizeBtn"), "mouseout", removeMouseOverToolTip);
  bindEvent(getElement("lpChatMaximizeBtn"), "mouseout", removeMouseOverToolTip);
  bindEvent(getElement("lpChatEndChatBtn"), "mouseout", removeMouseOverToolTip); 
  bindEvent(getElement("lpChatEndChatBtnMin"), "mouseout", removeMouseOverToolTip);

  bindEvent(getElement("lpChatTitleDragArea"), "mousedown", showGrabPointer);
  bindEvent(getElement("lpChatTitleDragArea"), "mouseup", hideGrabPointer);
  bindEvent(getElement("lpChatTitleDragArea"), "mouseleave", hideGrabPointer);
  
  bindEvent(getElement("confirmButton"), "click", closeButtonConfirmClick); 
  bindEvent(getElement("confirmCancel"), "click", closeButtonCancelClick); 
  bindEvent(getElement("confirmCancel"), "keydown", focusOnEndChat); 
  bindEvent(getElement("confirmButton"), "keydown", closeButtonConfirmClickonKey); 
  
  bindEvent(getElement("coBrowseCancel"), "click", coBrowseCancelClick); 
  bindEvent(getElement("coBrowseAgree"), "click", coBrowseAgreeClick);
    
  bindEvent(window, "resize", onWinResizeEvent); 
  logger.debug("bindEvents", "complete");      
 }
 
 myUI.isChatWinLoaded = function() {
  return chatWinLoaded;
 }
 
 myUI.webServicesEnable = function(){
  lpPCIGenIDEnable = true;
 }
 
 myUI.webServicesDisable = function(){
  lpPCIGenIDEnable = false;
 }
 
 myUI.embeddedChatVersion = function(){
  return lpCWTagConst.VERSION;
 }
 /*US669762*/
 myUI.isSessionStorageSupported = function(){
		var sessionStorageFound = false;
		try{
			if(typeof sessionStorage != "undefined" && sessionStorage != null){
				sessionStorageFound = true;
			}
		} catch(excpt){}
			
		logger.debug("sessionStorage " + (sessionStorageFound?"is": "is NOT"), "available");
		return sessionStorageFound;
	}

	myUI.isJSONSupported = function(){
		var jsonFound = false;
		try{
			if (JSON && typeof JSON.parse === 'function') {
				jsonFound = true;
			}else if (typeof JSON === 'object' && typeof JSON.parse === 'function') {
				jsonFound = true;
			}
		} catch(excpt){}
			
		logger.debug("JSON " + (jsonFound?"is": "is NOT"), "available");
		return jsonFound;
	}
	
	myUI.isPostMessageSupported = function(){
		var postMsgFound = false;
		try{
			if (typeof window.postMessage === 'function') {
				postMsgFound = true;
			}else if (typeof window.postMessage != 'undefined') {
				postMsgFound = true;
			}
		} catch(excpt){}
			
		logger.debug("PostMessage " + (postMsgFound?"is": "is NOT"), "available");
		return postMsgFound;
	}
	
	myUI.isBrowserCompatible = function(){
		var incompatibilityRC = "";
		if(!myUI.isJSONSupported()){incompatibilityRC="JSONNotSupported_";}
		if(!myUI.isPostMessageSupported()){incompatibilityRC=incompatibilityRC+"PostMessageNotSupported_";}
		if(!myUI.isSessionStorageSupported()){incompatibilityRC=incompatibilityRC+"SessionStorageNotSupported";}
		if(incompatibilityRC!=""){
			lpSendData("session","EWINFO",incompatibilityRC);
		}
		return myUI.isJSONSupported() && myUI.isPostMessageSupported() && myUI.isSessionStorageSupported() ? true: false;
	} 
 /*US669762*/
 
}
lpChatWidgetUI = new lpCWTagUI.LPChatWidgetUI(window);
/*** BELOW METHODs AVAILABLE MAIN WINDOW ***/
/**
 * invoke this method if you want to end chat. This is particular useful when a user clicks to log out and 
 * you code needs to call this method to end the chat as well.
 */
function lpEndChat(){
 delCookie("lp_flg");
 lpChatWidgetUI.endChatRequest();
}
/**
 * invoke this method to start embedded chat. This is required to call this method when users click on 'chat now' button
 */
//added for drag and drop
function loadDragJSForInlineChat(){
 try {
  if(wasDragJSLoaded()){
   return;
  }
  var url = "https://icm.aexp-static.com/content/dam/chat/prod/lechat/js/drag.min.js";
  var oHead = document.getElementsByTagName('head').item(0);
  var oScript = document.createElement("script");
  oScript.type = "text/javascript";
  oScript.async = true;
  oScript.src = url;
  oHead.appendChild(oScript);
 } catch (e) {
 }
}
function wasDragJSLoaded() {
 var x = document.getElementsByTagName("script");
 for ( var i = 0; i < x.length; i++) {
  if (x[i].src.indexOf("lechat/js/drag.min.js") > -1) {
   return true;
  }
 }
 return false;
}
function setAACookieForInlineChat(){
 try {
  setCookie('lp_flg', "true", null, 45);
 } catch (e) {
  //console.log("Error in setAACookieForInlineChat:: " + e.message);
 }
}

function setlpchatActiveCookie(){
 try {
  setCookie('lpchat_active', "true", null, 120);
  if(smsForChat) {
    setCookie('smschat_active', "true", null, 30);
  }
 } catch (e) {
  //console.log("Error in setlpchatActiveCookie:: " + e.message);
 }
}
function setmarvinchatActiveCookie(){
 try {
  setCookie('marvinchat_active', "true", null, 120);
 } catch (e) {
  //console.log("Error in setlpchatActiveCookie:: " + e.message);
 }
}
function setlpchatActiveCookie1(cName,cValue){
 try {
  setCookie(cName, cValue, null, 120);
 } catch (e) {
  //console.log("Error in setlpchatActiveCookie:: " + e.message);
 }
}

function setlpchatActiveCookie2(cName,cValue){
 try {
  setCookie(cName, cValue, null, 120);
 } catch (e) {
  //console.log("Error in setlpchatActiveCookie:: " + e.message);
 }
}

function deletelpchatActiveCookie(){
 try {
  delCookie('lpchat_active');
  delCookie('smschat_active');
 } catch (e) {
  //console.log("Error in deletelpchatActiveCookie:: " + e.message);
 }
}

function deletelpchatActiveCookie1(cname){
 try {
  delCookie(cname);
 } catch (e) {
  //console.log("Error in deletelpchatActiveCookie:: " + e.message);
 }
}

function getCookie_AA1(cname){
	var cvalue='';
	if(typeof lpTestPopulation != "undefined" && lpTestPopulation!="")
		cvalue=lpTestPopulation.toUpperCase();
	else
		cvalue=getCookie_AA('lpPopulation');
	return cvalue;
}

function refreshAddLine(){
	//console.log("in refreshAddLine");
	if(!isTimerStopped){
		var travelele = document.getElementById("rhContainer");
		if (typeof chatSessionCallback != "undefined") {
			chatSessionCallback(true);
		}else if(window.location.href.indexOf("ssearch.jsp")>-1){
			var d = new Date();
			chatcurrentTime = d.getTime();
		}else if(typeof travelele !== 'undefined' && travelele !== null){
				angular.element(document.getElementById("rhContainer")).scope().$parent.userSessionTimeout();
		}else if (typeof timeoutWidget!= "undefined") {
			var d = new Date();
			chatcurrentTimetmp = d.getTime();
			if(chatcurrentTimetmp - chatlastrefreshtime >120000){
				timeoutWidget.refreshSession();
				chatlastrefreshtime = chatcurrentTimetmp; 
			}
		}else{ //added else condition for SPA
		    //console.log("in keepSessionAlive");
			var d = new Date();
			chatcurrentTimetmp = d.getTime();
			if(chatcurrentTimetmp - chatlastrefreshtime >120000){
				lpChatWidgetUI.keepSessionAlive();
				chatlastrefreshtime = chatcurrentTimetmp; 
			}
			
		}
	}
}

/**
 * invoke when bootstrap.js is included and once the page is loaded
 */
function lpChatOnPageLoad() {
 try{
 loadDragJSForInlineChat();
 lpChatWidgetUI.chatOnPageLoad(); 
 }catch(e){
  //console.log("Error in lpChatOnPageLoad:: " + e.message);
 }
}
function lpLoadChat(data) {
//var d = new Date();
//starttimeLP = d.getTime();
// the code added for chat error window displayed when conversation is not closed
// by CM properly - Begin
if ( typeof data != 'undefined' && data != null ){
    if ( data.eventName == null || typeof data.eventName == 'undefined' ){
       loadDragJSForInlineChat();
       setAACookieForInlineChat();
       lpChatWidgetUI.loadChat(data);
       // isTimerStopped=false;
       chatlasttimeout=false;
    }
    else if (typeof data.eventName != 'undefined' && data.eventName != null && data.eventName == 'SHOW'){
       loadDragJSForInlineChat();
       setAACookieForInlineChat();
       lpChatWidgetUI.loadChat(data);
       // isTimerStopped=false;
       chatlasttimeout=false;
    }
 }
 confirmClicked=false;
 document.getElementById("mainpageoverlay").style.display="none";
 document.getElementById("mainpageprompt").style.display="none";	
}
function lpChatWizInfo(){
 new lpCWTagUI.LPChatWidgetLogger().info("Initializing Chat Widget Bootstrap", "Version ["+lpCWTagConst.VERSION+"]");
}
/***Function to remove close icon***/
function lpRemoveCloseIcon(){
//logger.debug("lpRemoveCloseIcon", "lpRemoveCloseIcon.....");
 document.getElementById("lpChatEndChatBtn").style.display = "none";
}
/***Function to show close icon***/
function lpShowCloseIcon(){
//logger.debug("lpShowCloseIcon", "lpShowCloseIcon.....");
 document.getElementById("lpChatEndChatBtn").style.display = "inline-block";
}

/** Escaping newline, tab, return character and space with single space. */
function escapeJSON(inputStr) {
    var outputStr = inputStr;
    try {
		if (typeof outputStr !== "undefined" && outputStr != null && outputStr !== "") {
			outputStr = outputStr.replace(/-{2,}/g, '-');
			outputStr = outputStr.replace(/[\n\t\r\s]+/g, ' ');
			outputStr = outputStr.replace(/"/g, '\\"');
			outputStr = outputStr.replace(/'/g, "\\'");
		}
    } catch (exception) {
        console.error("Exception while escaping JSON. Exception: " + exception);
    }
    return outputStr;
}

function invokeUILog(convId, type, msg) {
    try {
        var logDetails = '{"conversation_id" : "' + escapeJSON(convId) + '","event_type" : "' + type + '","message" : "' + escapeJSON(msg) + '"}';
        $iOA.ajax({
            url: "https://clicktochat.americanexpress.com/chat/uxevent",
            type: "POST",
            contentType: "application/json; charset=utf-8",
            crossDomain: true,
            data: logDetails,
			dataType: 'json',
			timeout: 600000,
            success: function(data) {
                //console.log("=> UX Event - Conversation ID: " + convId + ", Type: " + type + ", Message: " + msg);
            },
            error: function(res, status, err) {
                console.error("=> UX Event - Error while logging UX event. Status: " + status);
            }
        });
    } catch(e) {
        //console.log("=> UX Event - Exception: " + e);
    }
}

//show info to console that Embedded Chat Window is included.
lpChatWizInfo();

var isPremExp =false;
 var travelele = document.getElementById("rhContainer");	
  if(typeof travelele !== 'undefined' && travelele !== null){
	 var angElement = angular.element(travelele);
 if(angElement){ 
 var travelPlatTimer = setInterval(function(){ 
		var angscope= angElement.scope();
  if(typeof(angscope)!="undefined"){
   isPremExp = angscope.isPremiumExperience;
   
 if(isPremExp==true){
	 var travelclassname = document.body.className;
	 document.body.className = travelclassname+" lpTravelplat";
 }else{    
	angscope.$watch('isPremiumExperience', function(newValue, oldValue) {  
    isPremExp = angscope.isPremiumExperience; 	
    if(isPremExp==true){
	   var travelclassname = document.body.className;
	   document.body.className = travelclassname+" lpTravelplat";
    }
  }); 
 } 
 clearInterval(travelPlatTimer);
 }

 }, 500);
 
  
 } 
}

if(document.cookie.indexOf("lp_ppl")>-1){
	if(window.location.href.indexOf("accountprofile/us/view.do")!=-1){
		deletelpchatActiveCookie1('lp_ppl');
	var xcutData = getCrossCutData();
      MycaAssist.interstitial.paperless.display(xcutData);
	}
}
 
/*$("#startchart").on("click",function(e){
	lpLoadChat();
});*/
if(!smsForChat) {
 var dataHolder;
 var jwtTimer1 = setInterval(function(){
 dataHolder = getCrossCutData();
 if((typeof dataHolder!="undefined" && typeof dataHolder == "string" && dataHolder!="")){ 	 
 jwtValue="present";
clearInterval(jwtTimer1);
 }
}, 500);
}
if(window.location.href.indexOf("g3-dev.americanexpress.com")!=-1 || window.location.href.indexOf("g4-dev.americanexpress.com")!=-1 || window.location.href.indexOf("e2qglobal.americanexpress.com")!=-1 || window.location.href.indexOf("slglobal.americanexpress.com")!=-1 || window.location.href.indexOf("global.americanexpress.com")!=-1){
		lpChatWidgetUI.registerOnMessage();
}


 if( window.location.href.indexOf("us/credit-cards/card-application/apply")!=-1){
	 if(lpChatWidgetUI.lpReadCookie("amexsessioncookie")){
		 getapplysToken();
	 }
	 if(window.location.href.indexOf("business")!=-1 ){
	 var currentDocTitle = document.title;	 
	 window.onhashchange = function() {
 		 if(sToken==null && lpChatWidgetUI.lpReadCookie("amexsessioncookie")){
			getapplysToken();
		 }
		if(window.location.hash=="#/decision"){
	  var lpdecisionTimer = setInterval(function(){
		  if(typeof document.title != "undefined" && currentDocTitle!=document.title){ 
			  lpTag.sdes = lpTag.sdes||[];  
				  if(document.title=="Application IRIPS Conditional"){
					  lpTag.sdes.push({ "type": "error", "error": { "message": "PENDING",} } );
					  if(sToken!=null){
						  lpTag.sdes.push({"type": "ctmrinfo", "info": {"storeZipCode": "1"}});
					  }else{
						  lpTag.sdes.push({"type": "ctmrinfo", "info": {"storeZipCode": "2"}});
					  }
				  }		  
			  clearInterval(lpdecisionTimer);
		  }		  
	   }, 250);
		}else{
			currentDocTitle = document.title;
		}
	}
  }else{
	 window.onhashchange = function() {
         if(sToken==null && lpChatWidgetUI.lpReadCookie("amexsessioncookie")){
			getapplysToken();
		 }		 
		if(window.location.hash=="#/decision"){
	  var lpdecisionTimer = setInterval(function(){
		  if(typeof appdecision != "undefined"){
			  if(appdecision.indexOf("IRIPS")!=-1){
			  lpTag.sdes = lpTag.sdes||[];  
			  lpTag.sdes.push({ "type": "error", "error": { "message": "IRIPS",} } );
			   if(sToken!=null){
						  lpTag.sdes.push({"type": "ctmrinfo", "info": {"storeZipCode": "1"}});
					  }else{
						  lpTag.sdes.push({"type": "ctmrinfo", "info": {"storeZipCode": "2"}});
					  }
			  }
			  clearInterval(lpdecisionTimer);
		  }		  
	   }, 250);
		}
	}  
  }
 }

 function getXCutCollectionItem(collection, accountToken) {
	for(var i=0; i<collection.length; i++) {
		var item = collection[i];
		if(item && item.account_token && item.account_token === accountToken) {
			return item;
		}
	}
	return null;
 }
 
 function getapplysToken(){
   if(typeof $iN != "undefined"){
	 var correlation_id = Math.floor(Math.random() * 10000000000);
     $iN.ajax({
		   url: 'https://chatxcuttobdaas.americanexpress.com/getstoken',
		   type: "POST",
		   dataType: 'json',
		   contentType: "application/json;charset=utf-8",
		   data: '{"correlation_id" : "'+correlation_id+'"}',
		   cache: false,
		   crossDomain: true,
		   success: function(res) {
          sToken = res.stoken; 			   
		   },
		   error: function(xhr, status, error) {
		   },
		   xhrFields: {
			  withCredentials: true
		   }
	  })
   } 
 }

function isWindowEligible(windowId) {
  var isValid = false;
  var validIdList = lpCWTagConst.P1_WINDOW_ID[chatEnv];
  for (id of validIdList) {
    console.log(id);
	if(windowId == id) {
	  return true;
	}
  }
  return isValid;
}
function processChatPrioritization(data, eventInfo) {
	try {
		//console.log('processChatPrioritization data --> ',  data);
		//console.log('processChatPrioritization data.engagementId --> ',  data.engagementId);
		//console.log('processChatPrioritization lpCWTagConst.P1_Window_ID --> ',  lpCWTagConst.P1_WINDOW_ID);
		//console.log('processChatPrioritization data.windowId --> ',  data.windowId);
		//console.log('processChatPrioritization chatCookieExists --> ',  chatCookieExists());
		if(lpTag && lpTag.taglets && lpTag.taglets.rendererStub) {
			var clicked = false;
			if(!chatCookieExists() && (typeof data !== "undefined" && data != null && typeof data.windowId !== "undefined" && typeof data.engagementId !== "undefined")){
			 if (isWindowEligible(data.windowId)) {
        try{
        var corrId = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)+'-'+Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        invokeUILog(corrId,"INFO","processChatPrioritization Callback data.engagementId:"+data.engagementId+ " blueboxpublic:"+getCookie_AA("blueboxpublic"));
        }catch(e){}
				//clicked = lpTag.taglets.rendererStub.click(data.engagementId);
				document.querySelector('a[data-lp-event="click"]').click();
				intiatedFromChatPrioritization = true;
			  }
			}
		}
	} catch(e) {

	}
}

function chatPrioritization() {
	try {
		var eventId = lpTag.events.bind({
			eventName: "OFFER_IMPRESSION",
			appName: "LP_OFFERS",
			func: processChatPrioritization
		});
	} catch(e) {

	}
}

function adjustIframeContainerHeight(){   
 try{  
	var heightToSet;
	if(document.querySelectorAll("#lpChatWizContainer.res_Small").length > 0) {
		heightToSet = window.innerHeight-48;  // For RWD Stories
	} 
	else{  
		heightToSet = 410;
	} 
	setHeights(heightToSet);
 }catch(e){}
}

function setHeights(height){
  try{
	document.getElementById("lpChatiFrameContainer").style.height =  height+"px";
		document.getElementById("lpChatiFrame").style.height = height+"px";
  }catch(e){}  
}


function onlandscapeorientation(orientationChange, isPageReload) {
  try{
  if(device.mobile()){
	switch (window.orientation) {  
	case 0:   
		// Portrait  
		showChatWindowInPortraitMode(orientationChange, isPageReload);
		break;  
	case 180:   
		// Portrait (Upside-down)
		showChatWindowInPortraitMode(orientationChange, isPageReload);
		break;  
	case -90:  
		// Landscape (Clockwise)
		hideChatWindowInLandscapeMode(isPageReload);
		break;   
	case 90:   
		// Landscape  (Counterclockwise)
		hideChatWindowInLandscapeMode(isPageReload);
		break;
	} 
  }
  }catch(e){} 
}

function handlePinchZoom(event) {
  try{
	var startX = 0;
	var endX = 0;
	var startY = 0;
	var endY = 0;
	var touches = event.changedTouches;
	if (touches.length > 1) {
		//console.log(touches.length);
		for (var i = 0; i < touches.length; i++) {
			if (i == 0) {
				startX = touches[i].clientX;
				startY = touches[i].clientY;
			} else {
				endX = touches[i].clientX;
				endY = touches[i].clientY;
			}
			//console.log(i + " -- " + touches[i].identifier + " -- " + touches[i].clientX + " -- " + touches[i].clientY);
		}
		//console.log((startX - endX) + " -- " + (startY - endY));
		if ((startX - endX) !== 0 && (startY - endY) !== 0) {
			//alert("Pinch to zoom disabled");
			event.preventDefault();
			event.stopImmediatePropagation();
		}
	}
  }catch(e){}
}

function bindingWindowevents() {
	try {
		window.onresize = function (event) {
			C2C.RWD.deviceWidth = document.documentElement.clientWidth;
			C2C.RWD.roundedWidth = C2C.RWD.roundWidth(C2C.RWD.deviceWidth);
			C2C.RWD.setupClient(C2C.RWD.deviceWidth);
		}
		window.onorientationchange = function (event) {
			// US1629580 Landscape mode
			onlandscapeorientation("true");
		}
	} catch(e) {}
}

if (C2C == null || typeof (C2C) == "undefined") {
    var C2C = new Object()
}
C2C.RWD = {
    rwdView: false,
    deviceBucket: "large",
    deviceWidth: null,
    roundedWidth: null,
    init: function () {
         try{
            C2C.RWD.rwdView = true;
            C2C.RWD.deviceWidth = document.documentElement.clientWidth;
            C2C.RWD.roundedWidth = C2C.RWD.roundWidth(C2C.RWD.deviceWidth);
            C2C.RWD.setupClient(C2C.RWD.deviceWidth);  
         }catch(e){}            
    },
    deviceBucketer: function (width) { 
        var db = "large";
		/*DE303651: Error found in TC2126034: SIT_Switching to Landscape mode_Observations with longer devices*/
     try{
        if (width < 847) {
            if (width < 661) {
                db = "small" 
            } else {
                db = "medium"
            }
        } else {
            db = "large"
        }
     }catch(e){}          
        return db
    },
    roundWidth: function (width) {
        var remainder = 0;
        width % 100 > 50 ? remainder = 50 : 0;
        return Math.min(Math.floor(width / 100) * 100) + remainder;
    },
    capitalize: function (str) {
        return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()
    },
    setupClient: function (width) {
      try{  
        C2C.RWD.deviceBucket = C2C.RWD.deviceBucketer(width);
        C2C.RWD.deviceBucket = C2C.RWD.capitalize(C2C.RWD.deviceBucket);
        if(document.getElementById("lpChatWizContainer")!=null){
          var tmpClass = document.getElementById("lpChatWizContainer").className;
          tmpClass = tmpClass.replace(/\bres_.*?\b/g, '');
          tmpClass = tmpClass + " res_"+C2C.RWD.deviceBucket + " res_"+C2C.RWD.roundedWidth;
		  //console.log("tmpClass:: "+tmpClass);
          document.getElementById("lpChatWizContainer").className = tmpClass;   
		  //console.log("tmpClass:: "+tmpClass);
        }
		//console.log("setupClient");
		//console.log('class name:: '+document.getElementById("lpChatWizContainer").className);
		adjustIframeContainerHeight();
		lpChatWidgetUI.remakeHeaderOnResize();
		lpChatWidgetUI.updateOrientation(); 
      }catch(e){
       // console.log("exception in  setupClient",e);
      }   
    } 
};

function iOSversion() { 
  try{  
	//if (/Win(32)/.test(navigator.platform)) {
	if (/iP(hone|od|ad)/.test(navigator.platform)) { 
		//console.log("windows");
		if ((window.screen.height / window.screen.width == 736 / 414) && (window.devicePixelRatio == 3))
		{
			// "iPhone 6 Plus, 6s Plus, 7 Plus or 8 Plus";
			return 'iphone-6-plus-zoom';
		}  
		else if ((window.screen.height / window.screen.width == 667 / 375) && (window.devicePixelRatio == 3)) 
		{
			// "iPhone 6 Plus, 6s Plus, 7 Plus or 8 Plus (display zoom)";
			return 'iphone-6-plus';
		} 
		else if ((window.screen.height / window.screen.width == 667 / 375) && (window.devicePixelRatio == 2))
		{
			// "iPhone 6, 6s, 7 or 8";
			return 'iphone-6';
		} 
		else if ((window.screen.height / window.screen.width == 1.775) && (window.devicePixelRatio == 2)) 
		{
			// "iPhone 5, 5C, 5S, SE or 6, 6s, 7 and 8 (display zoom)";
			return 'iphone-5';
		} 
	}
  }catch(e){}
}

function checkVersionAndReturnHeight()
{
  try{
	ver = iOSversion();  
	if (ver && ver == "iphone-5") { 
		return 246;
	}
	else{ 
		return 232;
	}
  }catch(e){}
}

 
 
 
// US1587670  Disable Landscape Mode - Mobile Web Only  
function hideChatWindowInLandscapeMode(isPageReload) {
	try {
		var lpChatiFrameContainerEle = document.getElementById('lpChatiFrameContainer'); 
		if(!isPageReload && lpChatiFrameContainerEle &&  (lpChatiFrameContainerEle.style.display == '' ||  lpChatiFrameContainerEle.style.display == 'block')) {
			document.getElementById('lpChatTitleContainer').style.display 			= 'none';
			document.getElementById('lpChatiFrameContainer').style.visibility 	= 'hidden';
			document.getElementById('landscapeDiv').style.display					= 'block'; 
			document.getElementById('landscapeDiv').focus();
			try {
				if(document.getElementById("qfb") == null) {
					var qFBsheet = document.createElement('style'); qFBsheet.id = "qfb";
					qFBsheet.innerHTML = ".QSIFeedBackLink {display:none !important} .QSIPopOver {z-index:99 !important};";
					document.body.appendChild(qFBsheet);
				}
			} catch(e){}
		}
	} catch(e) {}
}


function showChatWindowInPortraitMode(orientationChange, isPageReload) {
	try {
		var lpChatiFrameContainerEle = document.getElementById('lpChatiFrameContainer'); 
		if(lpChatiFrameContainerEle && (lpChatiFrameContainerEle.style.display == '' ||  lpChatiFrameContainerEle.style.display == 'block')) {
			document.getElementById('landscapeDiv').style.display = 'none'; 
			document.getElementById('lpChatiFrameContainer').style.visibility = 'visible'; 
			document.getElementById('lpChatTitleContainer').style.display = 'block';
			if(typeof orientationChange != "undefined" && orientationChange == "true") {
				//document.querySelector('body>*:not(#lpChatWizContainer)').style.filter = "blur(2px)";
				addblurtoparent();
			}
		}
	} catch(e) {} 
}

	/** Get device family name from LP Tag. */
	function getDeviceFamilyName() {
		var deviceFamilyName = getDevice();
		try {
			deviceFamilyName = lpTag.device.familyName();
		} catch(e) {}
		return (deviceFamilyName || "DESKTOP").toUpperCase();
	}
	function l(n) {
		return -1 !== devNavigator.indexOf(n);
	}
	function getDevice() {
		try {
			var i = {};
			window.device = i;       
			i.macos = function() {
				return l("mac")
			}, i.ios = function() {
				return i.iphone() || i.ipod() || i.ipad()
			}, i.iphone = function() {
				return !i.windows() && l("iphone")
			}, i.ipod = function() {
				return l("ipod")
			}, i.ipad = function() {
				return l("ipad")
			}, i.android = function() {
				return !i.windows() && l("android")
			}, i.androidPhone = function() {
				return i.android() && l("mobile")
			}, i.androidTablet = function() {
				return i.android() && !l("mobile")
			}, i.blackberry = function() {
				return l("blackberry") || l("bb10") || l("rim")
			}, i.blackberryPhone = function() {
				return i.blackberry() && !l("tablet")
			}, i.blackberryTablet = function() {
				return i.blackberry() && l("tablet")
			}, i.windows = function() {
				return l("windows")
			}, i.windowsPhone = function() {
				return i.windows() && l("phone")
			}, i.windowsTablet = function() {
				return i.windows() && l("touch") && !i.windowsPhone()
			}, i.fxos = function() {
				return (l("(mobile") || l("(tablet")) && l(" rv:")
			}, i.fxosPhone = function() {
				return i.fxos() && l("mobile")
			}, i.fxosTablet = function() {
				return i.fxos() && l("tablet")
			}, i.meego = function() {
				return l("meego")
			}, i.cordova = function() {
				return window.cordova && "file:" === location.protocol
			}, i.nodeWebkit = function() {
				return "object" === t(window.process)
			}, i.mobile = function() {
				return i.androidPhone() || i.iphone() || i.ipod() || i.windowsPhone() || i.blackberryPhone() || i.fxosPhone() || i.meego()
			}, i.tablet = function() {
				return i.ipad() || i.androidTablet() || i.blackberryTablet() || i.windowsTablet() || i.fxosTablet()
			}, i.desktop = function() {
				return !i.tablet() && !i.mobile()
			}
		} catch(e) {}
	}
	getDevice();
/*********************
 * FOR DEV ENV - END *
 *********************/

/** Binding window events only for Mobile devices, to avoid Mobile experience on Desktop when window resized. */
if(device.mobile()) {
	C2C.RWD.init();
	bindingWindowevents();
}

 function addblurtoparent(){
  try{ 
   if(document.getElementById("lpChatWizContainer").style.display=="block"){
   if(document.getElementById("lpButtonDiv") != null){  
      savelpButtonDivcNames = document.getElementById("lpButtonDiv").className;
      document.getElementById("lpButtonDiv").className = savelpButtonDivcNames+" decreasezindex";   
   }
   var allparentElements = document.querySelectorAll('body>*:not(#lpChatWizContainer)');
   for(i=0;i<allparentElements.length; i++){
     allparentElements[i].style.filter = "blur(2px)";     
   }
   }
  }catch(e){} 
 }
 
 function removeblurfromparent(){
   try{ 
   if(document.getElementById("lpButtonDiv") != null && savelpButtonDivcNames !== ""){
      savelpButtonDivcNames = savelpButtonDivcNames.replace(/decreasezindex/g, ''); 
      document.getElementById("lpButtonDiv").className = savelpButtonDivcNames;
   }
   var allparentElements = document.querySelectorAll('body>*:not(#lpChatWizContainer)');
   for(i=0;i<allparentElements.length; i++){
     allparentElements[i].style.filter = "";     
   }
   }catch(e){} 
 }
function getCrossCutData(){
var xcutobj;
try {
if(typeof chatDataSource != "undefined" && typeof chatDataSource.memberData != "undefined" && typeof chatDataSource.memberData == "string" && chatDataSource.memberData !=null && JSON.stringify(chatDataSource.memberData)!='{}' && chatDataSource.memberData!=""){
	 xcutobj = chatDataSource.memberData;
     xcutType = "CDS";		  
  } else if(typeof mycaAssistJSON != "undefined"){
	if( typeof mycaAssistJSON.commonAppData != "undefined" && mycaAssistJSON.commonAppData !=null && mycaAssistJSON.commonAppData!="")
	{
		xcutobj = mycaAssistJSON.commonAppData;
        xcutType = "Non-CDS";		
	}
  }else if(typeof loyaltyAssistJSON != "undefined"){
	 if(typeof loyaltyAssistJSON.commonAppData != "undefined" && loyaltyAssistJSON.commonAppData !=null && loyaltyAssistJSON.commonAppData!="")
	 {
		 xcutobj = loyaltyAssistJSON.commonAppData;
		 xcutType = "Non-CDS";
	  }
  }
  } catch(e){} 
  return xcutobj; 
}

function getDataFromCrossCut(xcutobj, xcutType, attribute) {
var attributValue = "";
try {
if (typeof xcutobj !== "undefined" && xcutobj !== null) {
switch(attribute) { 
 case "sToken" :
  attributValue =  xcutType === "CDS" ? JSON.parse(xcutobj).sessionToken : JSON.parse(xcutobj).stoken;
  break;
 case "embossedName" :
  attributValue =  xcutType === "CDS" ? JSON.parse(xcutobj).accounts[0].embossedName : JSON.parse(xcutobj).cardsInfoList[0].embossedName; 
  break;
 } 
}
}catch(e){} 
return attributValue;
}

function invokeJSUILog(convId, type, msg) {
    var logDetails = '{"conversation_id" : "' + escapeJSON(convId) + '","event_type" : "' + type + '","message" : "' + escapeJSON(msg) + '"}';
    var  url = "https://clicktochat.americanexpress.com/chat/uxevent";
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.open("POST", url);
    xmlhttp.setRequestHeader("Content-type", "application/json; charset=utf-8");
    xmlhttp.send(logDetails);
}

function getUniqueChatId(count) {
    try{
        var corrId = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1)+'-'+Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
		var chatAppPageUrl = encodeURIComponent(location.href.replace(location.protocol,""));
        invokeJSUILog("smschat-"+corrId,"INFO","Invoking generateChatSessionId from page "+ chatAppPageUrl +" count: "+ count);
    }catch(e){}    
    var incrementer = count + 1;
    var  url = "https://clicktochat.americanexpress.com/chat/generateChatSessionId";
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function() {
        if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
            console.log('responseText:' + xmlhttp.responseText);
            try {
                var data = xmlhttp.responseText;				
            } catch(err) {
                console.log(err.message + " in " + xmlhttp.responseText);
                return;
            }
			console.log('sms for chat unique id --> ', data)
            setSMSsdes(data);
        } else if (xmlhttp.readyState == 4 && xmlhttp.status !== 200) {
		  if(incrementer < 4) {
		    getUniqueChatId(incrementer);
		    //setSMSsdes('1234-56789-01234-567657');
		  }
		}
    };
    xmlhttp.withCredentials = true; 
    xmlhttp.open("POST", url);
    xmlhttp.send();
}

function setSMSsdes(data) {
   if (window.lpTag) {
    if (!window.lpTag.sdes) {
      window.lpTag.sdes = [];
    }
	var personal = {};
	var contacts = [];
	var contactData={};
	contactData["email"]=data;
	contacts.push(contactData);
	personal["contacts"] = contacts;
	lpTag.sdes.push({
      "type": "personal",
      "personal": personal
    });
	lpTag.sdes.push({
      "type": "ctmrinfo",
      "info": {
        "ctype": "US-SMS-en-GCA"
      }
    });
	lpTag.sdes.push({
      "type": "error",
      "error": {
        "message": ""
       }
    });	
	console.log('sms for chat sdes pushed --> ', lpTag.sdes);
	try {
	  console.log('sms for chat sdes pushed --> ', lpTag.sdes.inspect());
	}catch(e){}
  } 
  if (smsChat_pageName === "nl-help" && !chatCookieExists() ) {
    getLPdataForSMS();
	} 
  }

  var sms_ssid = "";
  var sms_svid = "";
  var smsTimer = null;	
  var lpRenderTimer = null;
function getLPdataForSMS() {
smsTimer = setInterval(function(){
// console.log('getLPdataForSMS sms_ssid: ', sms_ssid);
// console.log('getLPdataForSMS sms_svid: ', sms_svid);
if(sms_data.ssid !="" && sms_data.svid!="" && sms_data.eid!="" && sms_data.cid!="" ) {
  clearInterval(smsTimer);
} else {
 if(lpTag && lpTag!=null && lpTag.taglets && lpTag.taglets!=null && lpTag.taglets.lp_monitoringSDK && lpTag.taglets.lp_monitoringSDK!=null) {
    var sessId = lpTag.taglets.lp_monitoringSDK.getSid();
	var visitId = lpTag.taglets.lp_monitoringSDK.getVid();
	// console.log('lpTag.taglets.lp_monitoringSDK.getSid() : ', sessId);
	// console.log('lpTag.taglets.lp_monitoringSDK.getVid() : ', visitId);
	 if(sessId && sessId != null)
	   sms_ssid = sessId;
	 if (visitId && visitId != null)
       sms_svid = visitId;
	 if(sms_ssid!="" && sms_svid!="" && sms_data.eid!="" && sms_data.cid!="") {
	   //lpLoadChat({eid:"2477883730", cid:"2477852730", scid:"", ssid:sms_ssid, svid:sms_svid}) 
       sms_data.ssid = sms_ssid;
	   sms_data.svid = sms_svid;
	   console.log('BEFORE invoking button sms_data', sms_data);
	   lpRenderTimer = setInterval(function(){
	    console.log('SMS Waiting to rendererStub.click');
	    if (lpTag.taglets.rendererStub && lpTag.taglets.rendererStub!=null && lpTag.taglets.rendererStub.click && lpTag.taglets.rendererStub.click!=null) {
		  clearInterval(lpRenderTimer);
		  lpTag.taglets.rendererStub.click(sms_data.eid);
		}
	   }, 500);	   
     }	 
	} 
   }
  }, 1000);
}
var sms_data = {cid:'', eid:'', scid:'', ssid:'', svid:''};
function startSmsChat() {
console.log('ITM INVOKED SMS CODE');
if(!smsEventBind) {
if (lpTag.site) { 
window.Bootstrapper.loadScriptCallback('https://www.aexp-static.com/cdaas/one/axp-liveperson-chat/1.0.20/chatRules.js', function() {
if (typeof smsChat_pageName!== "undefined") {
  if (smsChat_pageName === "nl-help" || smsChat_pageName === "nl-payment"){
    window.smsForChat = true;
  }
}
if(typeof window.smsForChat === "undefined") {
  smsForChat = false;
}
console.log('Is smsForChat --> ', smsForChat);
if (window.smsForChat) {
  smsEventBind = true;
  lpTag.events.bind('LP_OFFERS', 'OFFER_IMPRESSION', function (data, eventInfo) { 
  console.log('sms_data data', data);
  sms_data.cid = data.campaignId;
  sms_data.eid = data.engagementId;
  sms_data.scid = data.contextId;
    console.log('sms_data', sms_data);
});
  getUniqueChatId(0);
 }
});
}else{
   console.log('ITM mTag not yet loaded');
   setTimeout(startSmsChat, 1000);   
 } 
}
}

if (typeof smsChat_pageName!== "undefined") {
  if (smsChat_pageName === "nl-help" || smsChat_pageName === "nl-payment"){
    window.smsForChat = true;
	  startSmsChat();
  }
} 